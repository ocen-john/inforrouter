'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34011
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34011.
'
Namespace InfoRouter
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="srvSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class srv
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private UploadFileChunkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTiffAsPDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadTiffAsPDFWithHandlerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocumentWithHandlerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocumentWithHandler1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocumentWithHandler2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocumentWithHandler3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadNewDocumentWidthHandlerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocument1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocument2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocument3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadDocument4OperationCompleted As System.Threading.SendOrPostCallback
        
        Private RegisterEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RegisterEmail1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private RegisterEmail2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ServerSideImportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateDocumentUsingTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLockPossibleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnLockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EmptyRecycleBinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PurgeRecycleBinItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RestoreRecycleBinItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRecycleBinContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeleteLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolderCatalogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolderStatisticsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getApplicationParametersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDomainsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMemberDomainsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ArchiveDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnarchiveDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DomainExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateFlowDefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateFlowDef1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFlowStepDefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFlowStepDef1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddFlowTaskDefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDomainFlowsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolderFlowsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFlowDefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPublishingRequirementsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCoWorkersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUserStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUserPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserPreferencesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGlobalGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDomainGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLocalGroupsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateUserGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUsergroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserGroupNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserGroupMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUsergroupMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUsergroupMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDomainMembersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDomainUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLocalUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetManagersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserAsDomainMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserFromDomainMembershipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserGroupAsDomainMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserGroupFromDomainMembershipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddManagerToDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveManagerFromDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextSearchPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreviousSearchPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRandDScheduleInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRandDSchedulesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateRandDScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRandDScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteRandDScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateDocumentTypeDefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDocumentTypeDefOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTagDefintionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertySetDefinitionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertySetDefinitions1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertySetFieldOptionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertySetDefinitionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreatePropertySetDefinitionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePropertySetDefinitionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePropertySetDefinitionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPropertySetFieldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPropertySetLookupFieldParametersForMYSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPropertySetLookupFieldParametersForSQLServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPropertySetLookupFieldParametersForORACLEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPropertySetFieldOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePropertySetFieldOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePropertySetFieldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MaintenanceBeatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ServerInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAddInInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAddInPartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateTicketforUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthenticateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthenticateUser1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private RenewTicketOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isValidTicketOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentAccessAllowedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FolderAccessAllowedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateFolder1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnpublishDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PublishDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDocumentVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserToFolderSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserToDocumentSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserFromFolderSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveUserFromDocumentSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FolderExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FolderExists1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubFoldersCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetParentFolderIDsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentVersionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentAbstractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentTextOnlyContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVersionTextOnlyContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetDocumentTextOnlyContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetVersionTextOnlyContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentCommentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssociationTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssociateDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssociateFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveAssociationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssociatedDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssociatedFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssociatedFoldersAndDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTasksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDueTaskDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddDocumentCommentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDocumentCommentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentViewLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentReadLogHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentKeywordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertySetsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPropertySetRowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePropertySetRowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePropertySetRowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolderRulesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetFolderRulesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFolderPropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDocumentPropertiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDocumentProperties1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDocumentTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitDocumentToFlowOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitDocumentToFlow1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetDocumentCompletionStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetDocumentImportanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolderRandDScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentRandDScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetDocumentRandDScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetDocumentRetentionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDocumentKeywordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessListHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetAccessListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApplyInheritedAccessListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DocumentExists1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubscriptionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFavoritesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMyDocumentsAndFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCheckedoutDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRecentDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadQueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFoldersAndDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFoldersAndDocuments1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFoldersAndDocuments2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFoldersAndDocumentsByPage2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolders1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFolders2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocuments1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFoldersByPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentsByPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFoldersAndDocumentsByPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MoveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CopyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadZipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadDocumentVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadInfoByVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadHandlerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDownloadHandlerByVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadFileChunkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateDocumentShortcutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateUploadHandlerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteDownloadHandlerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUploadHandlerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://edms.unra.go.ug/Inforouter/srv.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event UploadFileChunkCompleted As UploadFileChunkCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTiffAsPDFCompleted As UploadTiffAsPDFCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadTiffAsPDFWithHandlerCompleted As UploadTiffAsPDFWithHandlerCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocumentWithHandlerCompleted As UploadDocumentWithHandlerCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocumentWithHandler1Completed As UploadDocumentWithHandler1CompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocumentWithHandler2Completed As UploadDocumentWithHandler2CompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocumentWithHandler3Completed As UploadDocumentWithHandler3CompletedEventHandler
        
        '''<remarks/>
        Public Event UploadNewDocumentWidthHandlerCompleted As UploadNewDocumentWidthHandlerCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocumentCompleted As UploadDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocument1Completed As UploadDocument1CompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocument2Completed As UploadDocument2CompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocument3Completed As UploadDocument3CompletedEventHandler
        
        '''<remarks/>
        Public Event UploadDocument4Completed As UploadDocument4CompletedEventHandler
        
        '''<remarks/>
        Public Event RegisterEmailCompleted As RegisterEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event RegisterEmail1Completed As RegisterEmail1CompletedEventHandler
        
        '''<remarks/>
        Public Event RegisterEmail2Completed As RegisterEmail2CompletedEventHandler
        
        '''<remarks/>
        Public Event ServerSideImportCompleted As ServerSideImportCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateDocumentUsingTemplateCompleted As CreateDocumentUsingTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLockPossibleCompleted As IsLockPossibleCompletedEventHandler
        
        '''<remarks/>
        Public Event LockCompleted As LockCompletedEventHandler
        
        '''<remarks/>
        Public Event UnLockCompleted As UnLockCompletedEventHandler
        
        '''<remarks/>
        Public Event EmptyRecycleBinCompleted As EmptyRecycleBinCompletedEventHandler
        
        '''<remarks/>
        Public Event PurgeRecycleBinItemCompleted As PurgeRecycleBinItemCompletedEventHandler
        
        '''<remarks/>
        Public Event RestoreRecycleBinItemCompleted As RestoreRecycleBinItemCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRecycleBinContentCompleted As GetRecycleBinContentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeleteLogCompleted As GetDeleteLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolderCatalogCompleted As GetFolderCatalogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolderStatisticsCompleted As GetFolderStatisticsCompletedEventHandler
        
        '''<remarks/>
        Public Event getApplicationParametersCompleted As getApplicationParametersCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateDomainCompleted As CreateDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDomainCompleted As DeleteDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDomainsCompleted As GetDomainsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMemberDomainsCompleted As GetMemberDomainsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDomainCompleted As GetDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDomainCompleted As UpdateDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event ArchiveDomainCompleted As ArchiveDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event UnarchiveDomainCompleted As UnarchiveDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event DomainExistsCompleted As DomainExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateFlowDefCompleted As CreateFlowDefCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateFlowDef1Completed As CreateFlowDef1CompletedEventHandler
        
        '''<remarks/>
        Public Event AddFlowStepDefCompleted As AddFlowStepDefCompletedEventHandler
        
        '''<remarks/>
        Public Event AddFlowStepDef1Completed As AddFlowStepDef1CompletedEventHandler
        
        '''<remarks/>
        Public Event AddFlowTaskDefCompleted As AddFlowTaskDefCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDomainFlowsCompleted As GetDomainFlowsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolderFlowsCompleted As GetFolderFlowsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFlowDefCompleted As GetFlowDefCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPublishingRequirementsCompleted As GetPublishingRequirementsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllUsersCompleted As GetAllUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCoWorkersCompleted As GetCoWorkersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCompleted As GetUserCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateUserCompleted As CreateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserProfileCompleted As UpdateUserProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUserStatusCompleted As ChangeUserStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUserPasswordCompleted As ChangeUserPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserEmailCompleted As UpdateUserEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserPreferencesCompleted As UpdateUserPreferencesCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserCompleted As DeleteUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserGroupCompleted As GetUserGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGlobalGroupsCompleted As GetGlobalGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDomainGroupsCompleted As GetDomainGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLocalGroupsCompleted As GetLocalGroupsCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateUserGroupCompleted As CreateUserGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUsergroupCompleted As DeleteUsergroupCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserGroupNameCompleted As UpdateUserGroupNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserGroupMembersCompleted As GetUserGroupMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUsergroupMemberCompleted As AddUsergroupMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUsergroupMemberCompleted As RemoveUsergroupMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDomainMembersCompleted As GetDomainMembersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDomainUsersCompleted As GetDomainUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLocalUsersCompleted As GetLocalUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetManagersCompleted As GetManagersCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserAsDomainMemberCompleted As AddUserAsDomainMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserFromDomainMembershipCompleted As RemoveUserFromDomainMembershipCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserGroupAsDomainMemberCompleted As AddUserGroupAsDomainMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserGroupFromDomainMembershipCompleted As RemoveUserGroupFromDomainMembershipCompletedEventHandler
        
        '''<remarks/>
        Public Event AddManagerToDomainCompleted As AddManagerToDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveManagerFromDomainCompleted As RemoveManagerFromDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event SearchCompleted As SearchCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextSearchPageCompleted As GetNextSearchPageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreviousSearchPageCompleted As GetPreviousSearchPageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRandDScheduleInfoCompleted As GetRandDScheduleInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRandDSchedulesCompleted As GetRandDSchedulesCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateRandDScheduleCompleted As CreateRandDScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRandDScheduleCompleted As UpdateRandDScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteRandDScheduleCompleted As DeleteRandDScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentTypesCompleted As GetDocumentTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateDocumentTypeDefCompleted As CreateDocumentTypeDefCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDocumentTypeDefCompleted As UpdateDocumentTypeDefCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTagDefintionsCompleted As GetTagDefintionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertySetDefinitionsCompleted As GetPropertySetDefinitionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertySetDefinitions1Completed As GetPropertySetDefinitions1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertySetFieldOptionsCompleted As GetPropertySetFieldOptionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertySetDefinitionCompleted As GetPropertySetDefinitionCompletedEventHandler
        
        '''<remarks/>
        Public Event CreatePropertySetDefinitionCompleted As CreatePropertySetDefinitionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePropertySetDefinitionCompleted As UpdatePropertySetDefinitionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePropertySetDefinitionCompleted As DeletePropertySetDefinitionCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPropertySetFieldCompleted As AddPropertySetFieldCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPropertySetLookupFieldParametersForMYSQLCompleted As SetPropertySetLookupFieldParametersForMYSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPropertySetLookupFieldParametersForSQLServerCompleted As SetPropertySetLookupFieldParametersForSQLServerCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPropertySetLookupFieldParametersForORACLECompleted As SetPropertySetLookupFieldParametersForORACLECompletedEventHandler
        
        '''<remarks/>
        Public Event AddPropertySetFieldOptionCompleted As AddPropertySetFieldOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePropertySetFieldOptionCompleted As DeletePropertySetFieldOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePropertySetFieldCompleted As DeletePropertySetFieldCompletedEventHandler
        
        '''<remarks/>
        Public Event MaintenanceBeatCompleted As MaintenanceBeatCompletedEventHandler
        
        '''<remarks/>
        Public Event ServerInfoCompleted As ServerInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAddInInfoCompleted As GetAddInInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAddInPartCompleted As GetAddInPartCompletedEventHandler
        
        '''<remarks/>
        Public Event LogOutCompleted As LogOutCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateTicketforUserCompleted As CreateTicketforUserCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthenticateUserCompleted As AuthenticateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthenticateUser1Completed As AuthenticateUser1CompletedEventHandler
        
        '''<remarks/>
        Public Event RenewTicketCompleted As RenewTicketCompletedEventHandler
        
        '''<remarks/>
        Public Event isValidTicketCompleted As isValidTicketCompletedEventHandler
        
        '''<remarks/>
        Public Event UserExistsCompleted As UserExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentAccessAllowedCompleted As DocumentAccessAllowedCompletedEventHandler
        
        '''<remarks/>
        Public Event FolderAccessAllowedCompleted As FolderAccessAllowedCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateFolderCompleted As CreateFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateFolder1Completed As CreateFolder1CompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFolderCompleted As DeleteFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDocumentCompleted As DeleteDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event UnpublishDocumentCompleted As UnpublishDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event PublishDocumentCompleted As PublishDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDocumentVersionCompleted As DeleteDocumentVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubscribersCompleted As GetSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserToFolderSubscribersCompleted As AddUserToFolderSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserToDocumentSubscribersCompleted As AddUserToDocumentSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserFromFolderSubscribersCompleted As RemoveUserFromFolderSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveUserFromDocumentSubscribersCompleted As RemoveUserFromDocumentSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event FolderExistsCompleted As FolderExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event FolderExists1Completed As FolderExists1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubFoldersCountCompleted As GetSubFoldersCountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetParentFolderIDsCompleted As GetParentFolderIDsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolderCompleted As GetFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentCompleted As GetDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentVersionsCompleted As GetDocumentVersionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentAbstractCompleted As GetDocumentAbstractCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentTextOnlyContentCompleted As GetDocumentTextOnlyContentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVersionTextOnlyContentCompleted As GetVersionTextOnlyContentCompletedEventHandler
        
        '''<remarks/>
        Public Event SetDocumentTextOnlyContentCompleted As SetDocumentTextOnlyContentCompletedEventHandler
        
        '''<remarks/>
        Public Event SetVersionTextOnlyContentCompleted As SetVersionTextOnlyContentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentCommentsCompleted As GetDocumentCommentsCompletedEventHandler
        
        '''<remarks/>
        Public Event AssociationTypesCompleted As AssociationTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event AssociateDocumentCompleted As AssociateDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event AssociateFolderCompleted As AssociateFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveAssociationCompleted As RemoveAssociationCompletedEventHandler
        
        '''<remarks/>
        Public Event AssociatedDocumentsCompleted As AssociatedDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event AssociatedFoldersCompleted As AssociatedFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event AssociatedFoldersAndDocumentsCompleted As AssociatedFoldersAndDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event getTasksCompleted As getTasksCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDueTaskDocumentsCompleted As GetDueTaskDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddDocumentCommentCompleted As AddDocumentCommentCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDocumentCommentCompleted As DeleteDocumentCommentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentViewLogCompleted As GetDocumentViewLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentReadLogHistoryCompleted As GetDocumentReadLogHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentKeywordsCompleted As GetDocumentKeywordsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertySetsCompleted As GetPropertySetsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPropertySetRowCompleted As AddPropertySetRowCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePropertySetRowCompleted As UpdatePropertySetRowCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePropertySetRowCompleted As DeletePropertySetRowCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOwnerCompleted As GetOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event SetOwnerCompleted As SetOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolderRulesCompleted As GetFolderRulesCompletedEventHandler
        
        '''<remarks/>
        Public Event SetFolderRulesCompleted As SetFolderRulesCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFolderPropertiesCompleted As UpdateFolderPropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDocumentPropertiesCompleted As UpdateDocumentPropertiesCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDocumentProperties1Completed As UpdateDocumentProperties1CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDocumentTypeCompleted As UpdateDocumentTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitDocumentToFlowCompleted As SubmitDocumentToFlowCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitDocumentToFlow1Completed As SubmitDocumentToFlow1CompletedEventHandler
        
        '''<remarks/>
        Public Event SetDocumentCompletionStatusCompleted As SetDocumentCompletionStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event SetDocumentImportanceCompleted As SetDocumentImportanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolderRandDScheduleCompleted As GetFolderRandDScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentRandDScheduleCompleted As GetDocumentRandDScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event SetDocumentRandDScheduleCompleted As SetDocumentRandDScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event SetDocumentRetentionCompleted As SetDocumentRetentionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDocumentKeywordsCompleted As UpdateDocumentKeywordsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessListCompleted As GetAccessListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessListHistoryCompleted As GetAccessListHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event SetAccessListCompleted As SetAccessListCompletedEventHandler
        
        '''<remarks/>
        Public Event ApplyInheritedAccessListCompleted As ApplyInheritedAccessListCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentExistsCompleted As DocumentExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event DocumentExists1Completed As DocumentExists1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentsCompleted As GetDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubscriptionsCompleted As GetSubscriptionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFavoritesCompleted As GetFavoritesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMyDocumentsAndFoldersCompleted As GetMyDocumentsAndFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCheckedoutDocumentsCompleted As GetCheckedoutDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRecentDocumentsCompleted As GetRecentDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadQueCompleted As GetDownloadQueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFoldersAndDocumentsCompleted As GetFoldersAndDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFoldersCompleted As GetFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFoldersAndDocuments1Completed As GetFoldersAndDocuments1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFoldersAndDocuments2Completed As GetFoldersAndDocuments2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFoldersAndDocumentsByPage2Completed As GetFoldersAndDocumentsByPage2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolders1Completed As GetFolders1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFolders2Completed As GetFolders2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocuments1Completed As GetDocuments1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFoldersByPageCompleted As GetFoldersByPageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentsByPageCompleted As GetDocumentsByPageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFoldersAndDocumentsByPageCompleted As GetFoldersAndDocumentsByPageCompletedEventHandler
        
        '''<remarks/>
        Public Event MoveCompleted As MoveCompletedEventHandler
        
        '''<remarks/>
        Public Event CopyCompleted As CopyCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadZipCompleted As DownloadZipCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadDocumentCompleted As DownloadDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadDocumentVersionCompleted As DownloadDocumentVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadInfoCompleted As GetDownloadInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadInfoByVersionCompleted As GetDownloadInfoByVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadHandlerCompleted As GetDownloadHandlerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDownloadHandlerByVersionCompleted As GetDownloadHandlerByVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadFileChunkCompleted As DownloadFileChunkCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateDocumentShortcutCompleted As CreateDocumentShortcutCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateURLCompleted As CreateURLCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateUploadHandlerCompleted As CreateUploadHandlerCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteDownloadHandlerCompleted As DeleteDownloadHandlerCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUploadHandlerCompleted As DeleteUploadHandlerCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFileChunk", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFileChunk(ByVal AuthenticationTicket As String, ByVal UploadHandler As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileChunk() As Byte, ByVal ChunkHEXCRC As String, ByVal LastChunk As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadFileChunk", New Object() {AuthenticationTicket, UploadHandler, FileChunk, ChunkHEXCRC, LastChunk})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadFileChunk(ByVal AuthenticationTicket As String, ByVal UploadHandler As String, ByVal FileChunk() As Byte, ByVal ChunkHEXCRC As String, ByVal LastChunk As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadFileChunk", New Object() {AuthenticationTicket, UploadHandler, FileChunk, ChunkHEXCRC, LastChunk}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadFileChunk(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFileChunkAsync(ByVal AuthenticationTicket As String, ByVal UploadHandler As String, ByVal FileChunk() As Byte, ByVal ChunkHEXCRC As String, ByVal LastChunk As Boolean)
            Me.UploadFileChunkAsync(AuthenticationTicket, UploadHandler, FileChunk, ChunkHEXCRC, LastChunk, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFileChunkAsync(ByVal AuthenticationTicket As String, ByVal UploadHandler As String, ByVal FileChunk() As Byte, ByVal ChunkHEXCRC As String, ByVal LastChunk As Boolean, ByVal userState As Object)
            If (Me.UploadFileChunkOperationCompleted Is Nothing) Then
                Me.UploadFileChunkOperationCompleted = AddressOf Me.OnUploadFileChunkOperationCompleted
            End If
            Me.InvokeAsync("UploadFileChunk", New Object() {AuthenticationTicket, UploadHandler, FileChunk, ChunkHEXCRC, LastChunk}, Me.UploadFileChunkOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFileChunkOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFileChunkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFileChunkCompleted(Me, New UploadFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadTiffAsPDF", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTiffAsPDF(ByVal AuthenticationTicket As String, ByVal Path As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileContent() As Byte) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadTiffAsPDF", New Object() {AuthenticationTicket, Path, FileContent})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadTiffAsPDF(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadTiffAsPDF", New Object() {AuthenticationTicket, Path, FileContent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadTiffAsPDF(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTiffAsPDFAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte)
            Me.UploadTiffAsPDFAsync(AuthenticationTicket, Path, FileContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTiffAsPDFAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal userState As Object)
            If (Me.UploadTiffAsPDFOperationCompleted Is Nothing) Then
                Me.UploadTiffAsPDFOperationCompleted = AddressOf Me.OnUploadTiffAsPDFOperationCompleted
            End If
            Me.InvokeAsync("UploadTiffAsPDF", New Object() {AuthenticationTicket, Path, FileContent}, Me.UploadTiffAsPDFOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTiffAsPDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTiffAsPDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTiffAsPDFCompleted(Me, New UploadTiffAsPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadTiffAsPDFWithHandler", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadTiffAsPDFWithHandler(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadTiffAsPDFWithHandler", New Object() {AuthenticationTicket, Path, UploadHandler})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadTiffAsPDFWithHandler(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadTiffAsPDFWithHandler", New Object() {AuthenticationTicket, Path, UploadHandler}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadTiffAsPDFWithHandler(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadTiffAsPDFWithHandlerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String)
            Me.UploadTiffAsPDFWithHandlerAsync(AuthenticationTicket, Path, UploadHandler, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadTiffAsPDFWithHandlerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal userState As Object)
            If (Me.UploadTiffAsPDFWithHandlerOperationCompleted Is Nothing) Then
                Me.UploadTiffAsPDFWithHandlerOperationCompleted = AddressOf Me.OnUploadTiffAsPDFWithHandlerOperationCompleted
            End If
            Me.InvokeAsync("UploadTiffAsPDFWithHandler", New Object() {AuthenticationTicket, Path, UploadHandler}, Me.UploadTiffAsPDFWithHandlerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadTiffAsPDFWithHandlerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadTiffAsPDFWithHandlerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadTiffAsPDFWithHandlerCompleted(Me, New UploadTiffAsPDFWithHandlerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocumentWithHandler", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocumentWithHandler(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocumentWithHandler", New Object() {AuthenticationTicket, Path, UploadHandler})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocumentWithHandler(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocumentWithHandler", New Object() {AuthenticationTicket, Path, UploadHandler}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocumentWithHandler(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandlerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String)
            Me.UploadDocumentWithHandlerAsync(AuthenticationTicket, Path, UploadHandler, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandlerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal userState As Object)
            If (Me.UploadDocumentWithHandlerOperationCompleted Is Nothing) Then
                Me.UploadDocumentWithHandlerOperationCompleted = AddressOf Me.OnUploadDocumentWithHandlerOperationCompleted
            End If
            Me.InvokeAsync("UploadDocumentWithHandler", New Object() {AuthenticationTicket, Path, UploadHandler}, Me.UploadDocumentWithHandlerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocumentWithHandlerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocumentWithHandlerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocumentWithHandlerCompleted(Me, New UploadDocumentWithHandlerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocumentWithHandler1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocumentWithHandler1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocumentWithHandler1", New Object() {AuthenticationTicket, Path, UploadHandler, VersionComments})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocumentWithHandler1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocumentWithHandler1", New Object() {AuthenticationTicket, Path, UploadHandler, VersionComments}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocumentWithHandler1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandler1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String)
            Me.UploadDocumentWithHandler1Async(AuthenticationTicket, Path, UploadHandler, VersionComments, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandler1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String, ByVal userState As Object)
            If (Me.UploadDocumentWithHandler1OperationCompleted Is Nothing) Then
                Me.UploadDocumentWithHandler1OperationCompleted = AddressOf Me.OnUploadDocumentWithHandler1OperationCompleted
            End If
            Me.InvokeAsync("UploadDocumentWithHandler1", New Object() {AuthenticationTicket, Path, UploadHandler, VersionComments}, Me.UploadDocumentWithHandler1OperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocumentWithHandler1OperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocumentWithHandler1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocumentWithHandler1Completed(Me, New UploadDocumentWithHandler1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocumentWithHandler2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocumentWithHandler2(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String, ByVal MPVersionMajor As Short, ByVal MPVersionMinor As Short, ByVal MPVersionRevision As Short) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocumentWithHandler2", New Object() {AuthenticationTicket, Path, UploadHandler, VersionComments, MPVersionMajor, MPVersionMinor, MPVersionRevision})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocumentWithHandler2(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String, ByVal MPVersionMajor As Short, ByVal MPVersionMinor As Short, ByVal MPVersionRevision As Short, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocumentWithHandler2", New Object() {AuthenticationTicket, Path, UploadHandler, VersionComments, MPVersionMajor, MPVersionMinor, MPVersionRevision}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocumentWithHandler2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandler2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String, ByVal MPVersionMajor As Short, ByVal MPVersionMinor As Short, ByVal MPVersionRevision As Short)
            Me.UploadDocumentWithHandler2Async(AuthenticationTicket, Path, UploadHandler, VersionComments, MPVersionMajor, MPVersionMinor, MPVersionRevision, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandler2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal VersionComments As String, ByVal MPVersionMajor As Short, ByVal MPVersionMinor As Short, ByVal MPVersionRevision As Short, ByVal userState As Object)
            If (Me.UploadDocumentWithHandler2OperationCompleted Is Nothing) Then
                Me.UploadDocumentWithHandler2OperationCompleted = AddressOf Me.OnUploadDocumentWithHandler2OperationCompleted
            End If
            Me.InvokeAsync("UploadDocumentWithHandler2", New Object() {AuthenticationTicket, Path, UploadHandler, VersionComments, MPVersionMajor, MPVersionMinor, MPVersionRevision}, Me.UploadDocumentWithHandler2OperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocumentWithHandler2OperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocumentWithHandler2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocumentWithHandler2Completed(Me, New UploadDocumentWithHandler2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocumentWithHandler3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocumentWithHandler3(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal xmlParameters As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocumentWithHandler3", New Object() {AuthenticationTicket, Path, UploadHandler, xmlParameters})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocumentWithHandler3(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal xmlParameters As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocumentWithHandler3", New Object() {AuthenticationTicket, Path, UploadHandler, xmlParameters}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocumentWithHandler3(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandler3Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal xmlParameters As String)
            Me.UploadDocumentWithHandler3Async(AuthenticationTicket, Path, UploadHandler, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentWithHandler3Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UploadHandler As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.UploadDocumentWithHandler3OperationCompleted Is Nothing) Then
                Me.UploadDocumentWithHandler3OperationCompleted = AddressOf Me.OnUploadDocumentWithHandler3OperationCompleted
            End If
            Me.InvokeAsync("UploadDocumentWithHandler3", New Object() {AuthenticationTicket, Path, UploadHandler, xmlParameters}, Me.UploadDocumentWithHandler3OperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocumentWithHandler3OperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocumentWithHandler3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocumentWithHandler3Completed(Me, New UploadDocumentWithHandler3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadNewDocumentWidthHandler", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadNewDocumentWidthHandler(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String, ByVal UploadHandler As String, ByVal xmlParameters As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadNewDocumentWidthHandler", New Object() {AuthenticationTicket, FolderPath, DocumentName, UploadHandler, xmlParameters})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadNewDocumentWidthHandler(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String, ByVal UploadHandler As String, ByVal xmlParameters As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadNewDocumentWidthHandler", New Object() {AuthenticationTicket, FolderPath, DocumentName, UploadHandler, xmlParameters}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadNewDocumentWidthHandler(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadNewDocumentWidthHandlerAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String, ByVal UploadHandler As String, ByVal xmlParameters As String)
            Me.UploadNewDocumentWidthHandlerAsync(AuthenticationTicket, FolderPath, DocumentName, UploadHandler, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadNewDocumentWidthHandlerAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String, ByVal UploadHandler As String, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.UploadNewDocumentWidthHandlerOperationCompleted Is Nothing) Then
                Me.UploadNewDocumentWidthHandlerOperationCompleted = AddressOf Me.OnUploadNewDocumentWidthHandlerOperationCompleted
            End If
            Me.InvokeAsync("UploadNewDocumentWidthHandler", New Object() {AuthenticationTicket, FolderPath, DocumentName, UploadHandler, xmlParameters}, Me.UploadNewDocumentWidthHandlerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadNewDocumentWidthHandlerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadNewDocumentWidthHandlerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadNewDocumentWidthHandlerCompleted(Me, New UploadNewDocumentWidthHandlerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocument(ByVal AuthenticationTicket As String, ByVal Path As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileContent() As Byte) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocument", New Object() {AuthenticationTicket, Path, FileContent})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocument(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocument", New Object() {AuthenticationTicket, Path, FileContent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocument(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte)
            Me.UploadDocumentAsync(AuthenticationTicket, Path, FileContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal userState As Object)
            If (Me.UploadDocumentOperationCompleted Is Nothing) Then
                Me.UploadDocumentOperationCompleted = AddressOf Me.OnUploadDocumentOperationCompleted
            End If
            Me.InvokeAsync("UploadDocument", New Object() {AuthenticationTicket, Path, FileContent}, Me.UploadDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocumentCompleted(Me, New UploadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocument1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocument1(ByVal AuthenticationTicket As String, ByVal Path As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileContent() As Byte, ByVal VersionComment As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocument1", New Object() {AuthenticationTicket, Path, FileContent, VersionComment})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocument1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal VersionComment As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocument1", New Object() {AuthenticationTicket, Path, FileContent, VersionComment}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocument1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocument1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal VersionComment As String)
            Me.UploadDocument1Async(AuthenticationTicket, Path, FileContent, VersionComment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocument1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal VersionComment As String, ByVal userState As Object)
            If (Me.UploadDocument1OperationCompleted Is Nothing) Then
                Me.UploadDocument1OperationCompleted = AddressOf Me.OnUploadDocument1OperationCompleted
            End If
            Me.InvokeAsync("UploadDocument1", New Object() {AuthenticationTicket, Path, FileContent, VersionComment}, Me.UploadDocument1OperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocument1OperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocument1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocument1Completed(Me, New UploadDocument1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocument2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocument2(ByVal AuthenticationTicket As String, ByVal Path As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileContent() As Byte, ByVal Checkout As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocument2", New Object() {AuthenticationTicket, Path, FileContent, Checkout})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocument2(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal Checkout As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocument2", New Object() {AuthenticationTicket, Path, FileContent, Checkout}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocument2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocument2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal Checkout As Boolean)
            Me.UploadDocument2Async(AuthenticationTicket, Path, FileContent, Checkout, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocument2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal Checkout As Boolean, ByVal userState As Object)
            If (Me.UploadDocument2OperationCompleted Is Nothing) Then
                Me.UploadDocument2OperationCompleted = AddressOf Me.OnUploadDocument2OperationCompleted
            End If
            Me.InvokeAsync("UploadDocument2", New Object() {AuthenticationTicket, Path, FileContent, Checkout}, Me.UploadDocument2OperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocument2OperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocument2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocument2Completed(Me, New UploadDocument2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocument3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocument3(ByVal AuthenticationTicket As String, ByVal Path As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileContent() As Byte, ByVal VersionComment As String, ByVal Checkout As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocument3", New Object() {AuthenticationTicket, Path, FileContent, VersionComment, Checkout})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocument3(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal VersionComment As String, ByVal Checkout As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocument3", New Object() {AuthenticationTicket, Path, FileContent, VersionComment, Checkout}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocument3(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocument3Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal VersionComment As String, ByVal Checkout As Boolean)
            Me.UploadDocument3Async(AuthenticationTicket, Path, FileContent, VersionComment, Checkout, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocument3Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal VersionComment As String, ByVal Checkout As Boolean, ByVal userState As Object)
            If (Me.UploadDocument3OperationCompleted Is Nothing) Then
                Me.UploadDocument3OperationCompleted = AddressOf Me.OnUploadDocument3OperationCompleted
            End If
            Me.InvokeAsync("UploadDocument3", New Object() {AuthenticationTicket, Path, FileContent, VersionComment, Checkout}, Me.UploadDocument3OperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocument3OperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocument3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocument3Completed(Me, New UploadDocument3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocument4", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDocument4(ByVal AuthenticationTicket As String, ByVal Path As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileContent() As Byte, ByVal xmlParameters As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadDocument4", New Object() {AuthenticationTicket, Path, FileContent, xmlParameters})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDocument4(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal xmlParameters As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDocument4", New Object() {AuthenticationTicket, Path, FileContent, xmlParameters}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDocument4(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadDocument4Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal xmlParameters As String)
            Me.UploadDocument4Async(AuthenticationTicket, Path, FileContent, xmlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadDocument4Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FileContent() As Byte, ByVal xmlParameters As String, ByVal userState As Object)
            If (Me.UploadDocument4OperationCompleted Is Nothing) Then
                Me.UploadDocument4OperationCompleted = AddressOf Me.OnUploadDocument4OperationCompleted
            End If
            Me.InvokeAsync("UploadDocument4", New Object() {AuthenticationTicket, Path, FileContent, xmlParameters}, Me.UploadDocument4OperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadDocument4OperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadDocument4CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadDocument4Completed(Me, New UploadDocument4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterEmail(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RegisterEmail", New Object() {AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRegisterEmail(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RegisterEmail", New Object() {AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRegisterEmail(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegisterEmailAsync(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String)
            Me.RegisterEmailAsync(AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegisterEmailAsync(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal userState As Object)
            If (Me.RegisterEmailOperationCompleted Is Nothing) Then
                Me.RegisterEmailOperationCompleted = AddressOf Me.OnRegisterEmailOperationCompleted
            End If
            Me.InvokeAsync("RegisterEmail", New Object() {AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers}, Me.RegisterEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnRegisterEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegisterEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegisterEmailCompleted(Me, New RegisterEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterEmail1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterEmail1(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal keywords As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RegisterEmail1", New Object() {AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRegisterEmail1(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal keywords As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RegisterEmail1", New Object() {AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRegisterEmail1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegisterEmail1Async(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal keywords As String)
            Me.RegisterEmail1Async(AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegisterEmail1Async(ByVal AuthenticationTicket As String, ByVal TargetPath As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal keywords As String, ByVal userState As Object)
            If (Me.RegisterEmail1OperationCompleted Is Nothing) Then
                Me.RegisterEmail1OperationCompleted = AddressOf Me.OnRegisterEmail1OperationCompleted
            End If
            Me.InvokeAsync("RegisterEmail1", New Object() {AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords}, Me.RegisterEmail1OperationCompleted, userState)
        End Sub
        
        Private Sub OnRegisterEmail1OperationCompleted(ByVal arg As Object)
            If (Not (Me.RegisterEmail1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegisterEmail1Completed(Me, New RegisterEmail1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterEmail2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterEmail2(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal EmailName As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal keywords As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RegisterEmail2", New Object() {AuthenticationTicket, FolderPath, EmailName, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRegisterEmail2( _
                    ByVal AuthenticationTicket As String,  _
                    ByVal FolderPath As String,  _
                    ByVal EmailName As String,  _
                    ByVal Senders As String,  _
                    ByVal Recipients As String,  _
                    ByVal CCAddress As String,  _
                    ByVal BCCAddress As String,  _
                    ByVal SentDate As Date,  _
                    ByVal Subject As String,  _
                    ByVal header As String,  _
                    ByVal htmlBody As String,  _
                    ByVal textBody As String,  _
                    ByVal AttachmentHandlers As String,  _
                    ByVal keywords As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RegisterEmail2", New Object() {AuthenticationTicket, FolderPath, EmailName, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRegisterEmail2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegisterEmail2Async(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal EmailName As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal keywords As String)
            Me.RegisterEmail2Async(AuthenticationTicket, FolderPath, EmailName, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegisterEmail2Async(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal EmailName As String, ByVal Senders As String, ByVal Recipients As String, ByVal CCAddress As String, ByVal BCCAddress As String, ByVal SentDate As Date, ByVal Subject As String, ByVal header As String, ByVal htmlBody As String, ByVal textBody As String, ByVal AttachmentHandlers As String, ByVal keywords As String, ByVal userState As Object)
            If (Me.RegisterEmail2OperationCompleted Is Nothing) Then
                Me.RegisterEmail2OperationCompleted = AddressOf Me.OnRegisterEmail2OperationCompleted
            End If
            Me.InvokeAsync("RegisterEmail2", New Object() {AuthenticationTicket, FolderPath, EmailName, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords}, Me.RegisterEmail2OperationCompleted, userState)
        End Sub
        
        Private Sub OnRegisterEmail2OperationCompleted(ByVal arg As Object)
            If (Not (Me.RegisterEmail2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegisterEmail2Completed(Me, New RegisterEmail2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ServerSideImport", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ServerSideImport(ByVal AuthenticationTicket As String, ByVal BaseServerSidePath As String, ByVal Items As String, ByVal TargetIRPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ServerSideImport", New Object() {AuthenticationTicket, BaseServerSidePath, Items, TargetIRPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginServerSideImport(ByVal AuthenticationTicket As String, ByVal BaseServerSidePath As String, ByVal Items As String, ByVal TargetIRPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ServerSideImport", New Object() {AuthenticationTicket, BaseServerSidePath, Items, TargetIRPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndServerSideImport(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ServerSideImportAsync(ByVal AuthenticationTicket As String, ByVal BaseServerSidePath As String, ByVal Items As String, ByVal TargetIRPath As String)
            Me.ServerSideImportAsync(AuthenticationTicket, BaseServerSidePath, Items, TargetIRPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ServerSideImportAsync(ByVal AuthenticationTicket As String, ByVal BaseServerSidePath As String, ByVal Items As String, ByVal TargetIRPath As String, ByVal userState As Object)
            If (Me.ServerSideImportOperationCompleted Is Nothing) Then
                Me.ServerSideImportOperationCompleted = AddressOf Me.OnServerSideImportOperationCompleted
            End If
            Me.InvokeAsync("ServerSideImport", New Object() {AuthenticationTicket, BaseServerSidePath, Items, TargetIRPath}, Me.ServerSideImportOperationCompleted, userState)
        End Sub
        
        Private Sub OnServerSideImportOperationCompleted(ByVal arg As Object)
            If (Not (Me.ServerSideImportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ServerSideImportCompleted(Me, New ServerSideImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDocumentUsingTemplate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateDocumentUsingTemplate(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TemplatePath As String, ByVal xmlContent As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateDocumentUsingTemplate", New Object() {AuthenticationTicket, Path, TemplatePath, xmlContent})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateDocumentUsingTemplate(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TemplatePath As String, ByVal xmlContent As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateDocumentUsingTemplate", New Object() {AuthenticationTicket, Path, TemplatePath, xmlContent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateDocumentUsingTemplate(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentUsingTemplateAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TemplatePath As String, ByVal xmlContent As String)
            Me.CreateDocumentUsingTemplateAsync(AuthenticationTicket, Path, TemplatePath, xmlContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentUsingTemplateAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TemplatePath As String, ByVal xmlContent As String, ByVal userState As Object)
            If (Me.CreateDocumentUsingTemplateOperationCompleted Is Nothing) Then
                Me.CreateDocumentUsingTemplateOperationCompleted = AddressOf Me.OnCreateDocumentUsingTemplateOperationCompleted
            End If
            Me.InvokeAsync("CreateDocumentUsingTemplate", New Object() {AuthenticationTicket, Path, TemplatePath, xmlContent}, Me.CreateDocumentUsingTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateDocumentUsingTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateDocumentUsingTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateDocumentUsingTemplateCompleted(Me, New CreateDocumentUsingTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsLockPossible", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLockPossible(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("IsLockPossible", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginIsLockPossible(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsLockPossible", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsLockPossible(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLockPossibleAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.IsLockPossibleAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLockPossibleAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.IsLockPossibleOperationCompleted Is Nothing) Then
                Me.IsLockPossibleOperationCompleted = AddressOf Me.OnIsLockPossibleOperationCompleted
            End If
            Me.InvokeAsync("IsLockPossible", New Object() {AuthenticationTicket, Path}, Me.IsLockPossibleOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLockPossibleOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLockPossibleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLockPossibleCompleted(Me, New IsLockPossibleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Lock", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Lock(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Lock", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginLock(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Lock", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLock(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LockAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.LockAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LockAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.LockOperationCompleted Is Nothing) Then
                Me.LockOperationCompleted = AddressOf Me.OnLockOperationCompleted
            End If
            Me.InvokeAsync("Lock", New Object() {AuthenticationTicket, Path}, Me.LockOperationCompleted, userState)
        End Sub
        
        Private Sub OnLockOperationCompleted(ByVal arg As Object)
            If (Not (Me.LockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LockCompleted(Me, New LockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnLock", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnLock(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal force As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UnLock", New Object() {AuthenticationTicket, Path, force})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUnLock(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal force As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UnLock", New Object() {AuthenticationTicket, Path, force}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUnLock(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnLockAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal force As Boolean)
            Me.UnLockAsync(AuthenticationTicket, Path, force, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnLockAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal force As Boolean, ByVal userState As Object)
            If (Me.UnLockOperationCompleted Is Nothing) Then
                Me.UnLockOperationCompleted = AddressOf Me.OnUnLockOperationCompleted
            End If
            Me.InvokeAsync("UnLock", New Object() {AuthenticationTicket, Path, force}, Me.UnLockOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnLockOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnLockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnLockCompleted(Me, New UnLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmptyRecycleBin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EmptyRecycleBin(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("EmptyRecycleBin", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginEmptyRecycleBin(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EmptyRecycleBin", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndEmptyRecycleBin(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EmptyRecycleBinAsync(ByVal AuthenticationTicket As String)
            Me.EmptyRecycleBinAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EmptyRecycleBinAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.EmptyRecycleBinOperationCompleted Is Nothing) Then
                Me.EmptyRecycleBinOperationCompleted = AddressOf Me.OnEmptyRecycleBinOperationCompleted
            End If
            Me.InvokeAsync("EmptyRecycleBin", New Object() {AuthenticationTicket}, Me.EmptyRecycleBinOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmptyRecycleBinOperationCompleted(ByVal arg As Object)
            If (Not (Me.EmptyRecycleBinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EmptyRecycleBinCompleted(Me, New EmptyRecycleBinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PurgeRecycleBinItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PurgeRecycleBinItem(ByVal AuthenticationTicket As String, ByVal ItemHandler As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("PurgeRecycleBinItem", New Object() {AuthenticationTicket, ItemHandler})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginPurgeRecycleBinItem(ByVal AuthenticationTicket As String, ByVal ItemHandler As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PurgeRecycleBinItem", New Object() {AuthenticationTicket, ItemHandler}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPurgeRecycleBinItem(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PurgeRecycleBinItemAsync(ByVal AuthenticationTicket As String, ByVal ItemHandler As String)
            Me.PurgeRecycleBinItemAsync(AuthenticationTicket, ItemHandler, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PurgeRecycleBinItemAsync(ByVal AuthenticationTicket As String, ByVal ItemHandler As String, ByVal userState As Object)
            If (Me.PurgeRecycleBinItemOperationCompleted Is Nothing) Then
                Me.PurgeRecycleBinItemOperationCompleted = AddressOf Me.OnPurgeRecycleBinItemOperationCompleted
            End If
            Me.InvokeAsync("PurgeRecycleBinItem", New Object() {AuthenticationTicket, ItemHandler}, Me.PurgeRecycleBinItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnPurgeRecycleBinItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.PurgeRecycleBinItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PurgeRecycleBinItemCompleted(Me, New PurgeRecycleBinItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RestoreRecycleBinItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RestoreRecycleBinItem(ByVal AuthenticationTicket As String, ByVal ItemHandler As String, ByVal RestorePath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RestoreRecycleBinItem", New Object() {AuthenticationTicket, ItemHandler, RestorePath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRestoreRecycleBinItem(ByVal AuthenticationTicket As String, ByVal ItemHandler As String, ByVal RestorePath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RestoreRecycleBinItem", New Object() {AuthenticationTicket, ItemHandler, RestorePath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRestoreRecycleBinItem(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RestoreRecycleBinItemAsync(ByVal AuthenticationTicket As String, ByVal ItemHandler As String, ByVal RestorePath As String)
            Me.RestoreRecycleBinItemAsync(AuthenticationTicket, ItemHandler, RestorePath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RestoreRecycleBinItemAsync(ByVal AuthenticationTicket As String, ByVal ItemHandler As String, ByVal RestorePath As String, ByVal userState As Object)
            If (Me.RestoreRecycleBinItemOperationCompleted Is Nothing) Then
                Me.RestoreRecycleBinItemOperationCompleted = AddressOf Me.OnRestoreRecycleBinItemOperationCompleted
            End If
            Me.InvokeAsync("RestoreRecycleBinItem", New Object() {AuthenticationTicket, ItemHandler, RestorePath}, Me.RestoreRecycleBinItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnRestoreRecycleBinItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.RestoreRecycleBinItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RestoreRecycleBinItemCompleted(Me, New RestoreRecycleBinItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRecycleBinContent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRecycleBinContent(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRecycleBinContent", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRecycleBinContent(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRecycleBinContent", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRecycleBinContent(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRecycleBinContentAsync(ByVal AuthenticationTicket As String)
            Me.GetRecycleBinContentAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRecycleBinContentAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetRecycleBinContentOperationCompleted Is Nothing) Then
                Me.GetRecycleBinContentOperationCompleted = AddressOf Me.OnGetRecycleBinContentOperationCompleted
            End If
            Me.InvokeAsync("GetRecycleBinContent", New Object() {AuthenticationTicket}, Me.GetRecycleBinContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRecycleBinContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRecycleBinContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRecycleBinContentCompleted(Me, New GetRecycleBinContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeleteLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeleteLog(ByVal AuthenticationTicket As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal PathFilter As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDeleteLog", New Object() {AuthenticationTicket, StartDate, EndDate, PathFilter})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDeleteLog(ByVal AuthenticationTicket As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal PathFilter As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDeleteLog", New Object() {AuthenticationTicket, StartDate, EndDate, PathFilter}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDeleteLog(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeleteLogAsync(ByVal AuthenticationTicket As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal PathFilter As String)
            Me.GetDeleteLogAsync(AuthenticationTicket, StartDate, EndDate, PathFilter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeleteLogAsync(ByVal AuthenticationTicket As String, ByVal StartDate As Date, ByVal EndDate As Date, ByVal PathFilter As String, ByVal userState As Object)
            If (Me.GetDeleteLogOperationCompleted Is Nothing) Then
                Me.GetDeleteLogOperationCompleted = AddressOf Me.OnGetDeleteLogOperationCompleted
            End If
            Me.InvokeAsync("GetDeleteLog", New Object() {AuthenticationTicket, StartDate, EndDate, PathFilter}, Me.GetDeleteLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeleteLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeleteLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeleteLogCompleted(Me, New GetDeleteLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderCatalog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolderCatalog(ByVal AuthenticationTicket As String, ByVal folderPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolderCatalog", New Object() {AuthenticationTicket, folderPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolderCatalog(ByVal AuthenticationTicket As String, ByVal folderPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolderCatalog", New Object() {AuthenticationTicket, folderPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolderCatalog(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolderCatalogAsync(ByVal AuthenticationTicket As String, ByVal folderPath As String)
            Me.GetFolderCatalogAsync(AuthenticationTicket, folderPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolderCatalogAsync(ByVal AuthenticationTicket As String, ByVal folderPath As String, ByVal userState As Object)
            If (Me.GetFolderCatalogOperationCompleted Is Nothing) Then
                Me.GetFolderCatalogOperationCompleted = AddressOf Me.OnGetFolderCatalogOperationCompleted
            End If
            Me.InvokeAsync("GetFolderCatalog", New Object() {AuthenticationTicket, folderPath}, Me.GetFolderCatalogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolderCatalogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolderCatalogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolderCatalogCompleted(Me, New GetFolderCatalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderStatistics", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolderStatistics(ByVal AuthenticationTicket As String, ByVal folderPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolderStatistics", New Object() {AuthenticationTicket, folderPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolderStatistics(ByVal AuthenticationTicket As String, ByVal folderPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolderStatistics", New Object() {AuthenticationTicket, folderPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolderStatistics(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolderStatisticsAsync(ByVal AuthenticationTicket As String, ByVal folderPath As String)
            Me.GetFolderStatisticsAsync(AuthenticationTicket, folderPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolderStatisticsAsync(ByVal AuthenticationTicket As String, ByVal folderPath As String, ByVal userState As Object)
            If (Me.GetFolderStatisticsOperationCompleted Is Nothing) Then
                Me.GetFolderStatisticsOperationCompleted = AddressOf Me.OnGetFolderStatisticsOperationCompleted
            End If
            Me.InvokeAsync("GetFolderStatistics", New Object() {AuthenticationTicket, folderPath}, Me.GetFolderStatisticsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolderStatisticsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolderStatisticsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolderStatisticsCompleted(Me, New GetFolderStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getApplicationParameters", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getApplicationParameters(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getApplicationParameters", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegingetApplicationParameters(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getApplicationParameters", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetApplicationParameters(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getApplicationParametersAsync(ByVal AuthenticationTicket As String)
            Me.getApplicationParametersAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getApplicationParametersAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.getApplicationParametersOperationCompleted Is Nothing) Then
                Me.getApplicationParametersOperationCompleted = AddressOf Me.OngetApplicationParametersOperationCompleted
            End If
            Me.InvokeAsync("getApplicationParameters", New Object() {AuthenticationTicket}, Me.getApplicationParametersOperationCompleted, userState)
        End Sub
        
        Private Sub OngetApplicationParametersOperationCompleted(ByVal arg As Object)
            If (Not (Me.getApplicationParametersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getApplicationParametersCompleted(Me, New getApplicationParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateDomain", New Object() {AuthenticationTicket, DomainName, Anonymous, Hidden, WelcomeMessage})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateDomain", New Object() {AuthenticationTicket, DomainName, Anonymous, Hidden, WelcomeMessage}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String)
            Me.CreateDomainAsync(AuthenticationTicket, DomainName, Anonymous, Hidden, WelcomeMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String, ByVal userState As Object)
            If (Me.CreateDomainOperationCompleted Is Nothing) Then
                Me.CreateDomainOperationCompleted = AddressOf Me.OnCreateDomainOperationCompleted
            End If
            Me.InvokeAsync("CreateDomain", New Object() {AuthenticationTicket, DomainName, Anonymous, Hidden, WelcomeMessage}, Me.CreateDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateDomainCompleted(Me, New CreateDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteDomain", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteDomain", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.DeleteDomainAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.DeleteDomainOperationCompleted Is Nothing) Then
                Me.DeleteDomainOperationCompleted = AddressOf Me.OnDeleteDomainOperationCompleted
            End If
            Me.InvokeAsync("DeleteDomain", New Object() {AuthenticationTicket, DomainName}, Me.DeleteDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDomainCompleted(Me, New DeleteDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomains", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDomains(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDomains", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDomains(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDomains", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDomains(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDomainsAsync(ByVal AuthenticationTicket As String)
            Me.GetDomainsAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDomainsAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetDomainsOperationCompleted Is Nothing) Then
                Me.GetDomainsOperationCompleted = AddressOf Me.OnGetDomainsOperationCompleted
            End If
            Me.InvokeAsync("GetDomains", New Object() {AuthenticationTicket}, Me.GetDomainsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDomainsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDomainsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDomainsCompleted(Me, New GetDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMemberDomains", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMemberDomains(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetMemberDomains", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMemberDomains(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMemberDomains", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMemberDomains(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMemberDomainsAsync(ByVal AuthenticationTicket As String)
            Me.GetMemberDomainsAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMemberDomainsAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetMemberDomainsOperationCompleted Is Nothing) Then
                Me.GetMemberDomainsOperationCompleted = AddressOf Me.OnGetMemberDomainsOperationCompleted
            End If
            Me.InvokeAsync("GetMemberDomains", New Object() {AuthenticationTicket}, Me.GetMemberDomainsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMemberDomainsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMemberDomainsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMemberDomainsCompleted(Me, New GetMemberDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDomain", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDomain", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetDomainAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetDomainOperationCompleted Is Nothing) Then
                Me.GetDomainOperationCompleted = AddressOf Me.OnGetDomainOperationCompleted
            End If
            Me.InvokeAsync("GetDomain", New Object() {AuthenticationTicket, DomainName}, Me.GetDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDomainCompleted(Me, New GetDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal NewDomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateDomain", New Object() {AuthenticationTicket, DomainName, NewDomainName, Anonymous, Hidden, WelcomeMessage})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal NewDomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDomain", New Object() {AuthenticationTicket, DomainName, NewDomainName, Anonymous, Hidden, WelcomeMessage}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal NewDomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String)
            Me.UpdateDomainAsync(AuthenticationTicket, DomainName, NewDomainName, Anonymous, Hidden, WelcomeMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal NewDomainName As String, ByVal Anonymous As Boolean, ByVal Hidden As Boolean, ByVal WelcomeMessage As String, ByVal userState As Object)
            If (Me.UpdateDomainOperationCompleted Is Nothing) Then
                Me.UpdateDomainOperationCompleted = AddressOf Me.OnUpdateDomainOperationCompleted
            End If
            Me.InvokeAsync("UpdateDomain", New Object() {AuthenticationTicket, DomainName, NewDomainName, Anonymous, Hidden, WelcomeMessage}, Me.UpdateDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDomainCompleted(Me, New UpdateDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ArchiveDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ArchiveDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ArchiveDomain", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginArchiveDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ArchiveDomain", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndArchiveDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ArchiveDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.ArchiveDomainAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ArchiveDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.ArchiveDomainOperationCompleted Is Nothing) Then
                Me.ArchiveDomainOperationCompleted = AddressOf Me.OnArchiveDomainOperationCompleted
            End If
            Me.InvokeAsync("ArchiveDomain", New Object() {AuthenticationTicket, DomainName}, Me.ArchiveDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnArchiveDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.ArchiveDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ArchiveDomainCompleted(Me, New ArchiveDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnarchiveDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnarchiveDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UnarchiveDomain", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUnarchiveDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UnarchiveDomain", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUnarchiveDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnarchiveDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.UnarchiveDomainAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnarchiveDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.UnarchiveDomainOperationCompleted Is Nothing) Then
                Me.UnarchiveDomainOperationCompleted = AddressOf Me.OnUnarchiveDomainOperationCompleted
            End If
            Me.InvokeAsync("UnarchiveDomain", New Object() {AuthenticationTicket, DomainName}, Me.UnarchiveDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnarchiveDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnarchiveDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnarchiveDomainCompleted(Me, New UnarchiveDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DomainExists", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DomainExists(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DomainExists", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDomainExists(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DomainExists", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDomainExists(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DomainExistsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.DomainExistsAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DomainExistsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.DomainExistsOperationCompleted Is Nothing) Then
                Me.DomainExistsOperationCompleted = AddressOf Me.OnDomainExistsOperationCompleted
            End If
            Me.InvokeAsync("DomainExists", New Object() {AuthenticationTicket, DomainName}, Me.DomainExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDomainExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DomainExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DomainExistsCompleted(Me, New DomainExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFlowDef", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFlowDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateFlowDef", New Object() {AuthenticationTicket, DomainName, FlowName, ActiveFolderPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateFlowDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateFlowDef", New Object() {AuthenticationTicket, DomainName, FlowName, ActiveFolderPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateFlowDef(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFlowDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String)
            Me.CreateFlowDefAsync(AuthenticationTicket, DomainName, FlowName, ActiveFolderPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFlowDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String, ByVal userState As Object)
            If (Me.CreateFlowDefOperationCompleted Is Nothing) Then
                Me.CreateFlowDefOperationCompleted = AddressOf Me.OnCreateFlowDefOperationCompleted
            End If
            Me.InvokeAsync("CreateFlowDef", New Object() {AuthenticationTicket, DomainName, FlowName, ActiveFolderPath}, Me.CreateFlowDefOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFlowDefOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFlowDefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFlowDefCompleted(Me, New CreateFlowDefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFlowDef1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFlowDef1(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String, ByVal OnEndMoveToPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateFlowDef1", New Object() {AuthenticationTicket, DomainName, FlowName, ActiveFolderPath, OnEndMoveToPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateFlowDef1(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String, ByVal OnEndMoveToPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateFlowDef1", New Object() {AuthenticationTicket, DomainName, FlowName, ActiveFolderPath, OnEndMoveToPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateFlowDef1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFlowDef1Async(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String, ByVal OnEndMoveToPath As String)
            Me.CreateFlowDef1Async(AuthenticationTicket, DomainName, FlowName, ActiveFolderPath, OnEndMoveToPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFlowDef1Async(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal ActiveFolderPath As String, ByVal OnEndMoveToPath As String, ByVal userState As Object)
            If (Me.CreateFlowDef1OperationCompleted Is Nothing) Then
                Me.CreateFlowDef1OperationCompleted = AddressOf Me.OnCreateFlowDef1OperationCompleted
            End If
            Me.InvokeAsync("CreateFlowDef1", New Object() {AuthenticationTicket, DomainName, FlowName, ActiveFolderPath, OnEndMoveToPath}, Me.CreateFlowDef1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFlowDef1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFlowDef1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFlowDef1Completed(Me, New CreateFlowDef1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFlowStepDef", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFlowStepDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddFlowStepDef", New Object() {AuthenticationTicket, DomainName, FlowName, StepName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddFlowStepDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddFlowStepDef", New Object() {AuthenticationTicket, DomainName, FlowName, StepName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddFlowStepDef(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFlowStepDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String)
            Me.AddFlowStepDefAsync(AuthenticationTicket, DomainName, FlowName, StepName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFlowStepDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String, ByVal userState As Object)
            If (Me.AddFlowStepDefOperationCompleted Is Nothing) Then
                Me.AddFlowStepDefOperationCompleted = AddressOf Me.OnAddFlowStepDefOperationCompleted
            End If
            Me.InvokeAsync("AddFlowStepDef", New Object() {AuthenticationTicket, DomainName, FlowName, StepName}, Me.AddFlowStepDefOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFlowStepDefOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFlowStepDefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFlowStepDefCompleted(Me, New AddFlowStepDefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFlowStepDef1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFlowStepDef1(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String, ByVal OnStartMoveTo As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddFlowStepDef1", New Object() {AuthenticationTicket, DomainName, FlowName, StepName, OnStartMoveTo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddFlowStepDef1(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String, ByVal OnStartMoveTo As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddFlowStepDef1", New Object() {AuthenticationTicket, DomainName, FlowName, StepName, OnStartMoveTo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddFlowStepDef1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFlowStepDef1Async(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String, ByVal OnStartMoveTo As Integer)
            Me.AddFlowStepDef1Async(AuthenticationTicket, DomainName, FlowName, StepName, OnStartMoveTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFlowStepDef1Async(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepName As String, ByVal OnStartMoveTo As Integer, ByVal userState As Object)
            If (Me.AddFlowStepDef1OperationCompleted Is Nothing) Then
                Me.AddFlowStepDef1OperationCompleted = AddressOf Me.OnAddFlowStepDef1OperationCompleted
            End If
            Me.InvokeAsync("AddFlowStepDef1", New Object() {AuthenticationTicket, DomainName, FlowName, StepName, OnStartMoveTo}, Me.AddFlowStepDef1OperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFlowStepDef1OperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFlowStepDef1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFlowStepDef1Completed(Me, New AddFlowStepDef1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFlowTaskDef", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddFlowTaskDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepNumber As Integer, ByVal TaskDefXML As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddFlowTaskDef", New Object() {AuthenticationTicket, DomainName, FlowName, StepNumber, TaskDefXML})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddFlowTaskDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepNumber As Integer, ByVal TaskDefXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddFlowTaskDef", New Object() {AuthenticationTicket, DomainName, FlowName, StepNumber, TaskDefXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddFlowTaskDef(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddFlowTaskDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepNumber As Integer, ByVal TaskDefXML As String)
            Me.AddFlowTaskDefAsync(AuthenticationTicket, DomainName, FlowName, StepNumber, TaskDefXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddFlowTaskDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal FlowName As String, ByVal StepNumber As Integer, ByVal TaskDefXML As String, ByVal userState As Object)
            If (Me.AddFlowTaskDefOperationCompleted Is Nothing) Then
                Me.AddFlowTaskDefOperationCompleted = AddressOf Me.OnAddFlowTaskDefOperationCompleted
            End If
            Me.InvokeAsync("AddFlowTaskDef", New Object() {AuthenticationTicket, DomainName, FlowName, StepNumber, TaskDefXML}, Me.AddFlowTaskDefOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddFlowTaskDefOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddFlowTaskDefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddFlowTaskDefCompleted(Me, New AddFlowTaskDefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainFlows", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDomainFlows(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDomainFlows", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDomainFlows(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDomainFlows", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDomainFlows(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDomainFlowsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetDomainFlowsAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDomainFlowsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetDomainFlowsOperationCompleted Is Nothing) Then
                Me.GetDomainFlowsOperationCompleted = AddressOf Me.OnGetDomainFlowsOperationCompleted
            End If
            Me.InvokeAsync("GetDomainFlows", New Object() {AuthenticationTicket, DomainName}, Me.GetDomainFlowsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDomainFlowsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDomainFlowsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDomainFlowsCompleted(Me, New GetDomainFlowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderFlows", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolderFlows(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal IncludeInheritedFlows As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolderFlows", New Object() {AuthenticationTicket, FolderPath, IncludeInheritedFlows})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolderFlows(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal IncludeInheritedFlows As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolderFlows", New Object() {AuthenticationTicket, FolderPath, IncludeInheritedFlows}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolderFlows(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolderFlowsAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal IncludeInheritedFlows As Boolean)
            Me.GetFolderFlowsAsync(AuthenticationTicket, FolderPath, IncludeInheritedFlows, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolderFlowsAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal IncludeInheritedFlows As Boolean, ByVal userState As Object)
            If (Me.GetFolderFlowsOperationCompleted Is Nothing) Then
                Me.GetFolderFlowsOperationCompleted = AddressOf Me.OnGetFolderFlowsOperationCompleted
            End If
            Me.InvokeAsync("GetFolderFlows", New Object() {AuthenticationTicket, FolderPath, IncludeInheritedFlows}, Me.GetFolderFlowsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolderFlowsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolderFlowsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolderFlowsCompleted(Me, New GetFolderFlowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFlowDef", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFlowDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal WorkflowName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFlowDef", New Object() {AuthenticationTicket, DomainName, WorkflowName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFlowDef(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal WorkflowName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFlowDef", New Object() {AuthenticationTicket, DomainName, WorkflowName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFlowDef(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFlowDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal WorkflowName As String)
            Me.GetFlowDefAsync(AuthenticationTicket, DomainName, WorkflowName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFlowDefAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal WorkflowName As String, ByVal userState As Object)
            If (Me.GetFlowDefOperationCompleted Is Nothing) Then
                Me.GetFlowDefOperationCompleted = AddressOf Me.OnGetFlowDefOperationCompleted
            End If
            Me.InvokeAsync("GetFlowDef", New Object() {AuthenticationTicket, DomainName, WorkflowName}, Me.GetFlowDefOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFlowDefOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFlowDefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFlowDefCompleted(Me, New GetFlowDefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublishingRequirements", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPublishingRequirements(ByVal AuthenticationTicket As String, ByVal domainname As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPublishingRequirements", New Object() {AuthenticationTicket, domainname})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPublishingRequirements(ByVal AuthenticationTicket As String, ByVal domainname As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPublishingRequirements", New Object() {AuthenticationTicket, domainname}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPublishingRequirements(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPublishingRequirementsAsync(ByVal AuthenticationTicket As String, ByVal domainname As String)
            Me.GetPublishingRequirementsAsync(AuthenticationTicket, domainname, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPublishingRequirementsAsync(ByVal AuthenticationTicket As String, ByVal domainname As String, ByVal userState As Object)
            If (Me.GetPublishingRequirementsOperationCompleted Is Nothing) Then
                Me.GetPublishingRequirementsOperationCompleted = AddressOf Me.OnGetPublishingRequirementsOperationCompleted
            End If
            Me.InvokeAsync("GetPublishingRequirements", New Object() {AuthenticationTicket, domainname}, Me.GetPublishingRequirementsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPublishingRequirementsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPublishingRequirementsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPublishingRequirementsCompleted(Me, New GetPublishingRequirementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllUsers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllUsers(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAllUsers", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAllUsers(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAllUsers", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAllUsers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllUsersAsync(ByVal AuthenticationTicket As String)
            Me.GetAllUsersAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllUsersAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetAllUsersOperationCompleted Is Nothing) Then
                Me.GetAllUsersOperationCompleted = AddressOf Me.OnGetAllUsersOperationCompleted
            End If
            Me.InvokeAsync("GetAllUsers", New Object() {AuthenticationTicket}, Me.GetAllUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllUsersCompleted(Me, New GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCoWorkers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCoWorkers(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetCoWorkers", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCoWorkers(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCoWorkers", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCoWorkers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCoWorkersAsync(ByVal AuthenticationTicket As String)
            Me.GetCoWorkersAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCoWorkersAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetCoWorkersOperationCompleted Is Nothing) Then
                Me.GetCoWorkersOperationCompleted = AddressOf Me.OnGetCoWorkersOperationCompleted
            End If
            Me.InvokeAsync("GetCoWorkers", New Object() {AuthenticationTicket}, Me.GetCoWorkersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCoWorkersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCoWorkersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCoWorkersCompleted(Me, New GetCoWorkersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUser(ByVal AuthenticationTicket As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUser", New Object() {AuthenticationTicket, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUser(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUser", New Object() {AuthenticationTicket, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUser(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal AuthenticationTicket As String, ByVal UserName As String)
            Me.GetUserAsync(AuthenticationTicket, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.GetUserOperationCompleted Is Nothing) Then
                Me.GetUserOperationCompleted = AddressOf Me.OnGetUserOperationCompleted
            End If
            Me.InvokeAsync("GetUser", New Object() {AuthenticationTicket, UserName}, Me.GetUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCompleted(Me, New GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateUser(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal FirstName As String, ByVal LastName As String, ByVal EmailAddress As String, ByVal Password As String, ByVal ReadOnlyUser As Boolean, ByVal AuthenticationSource As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateUser", New Object() {AuthenticationTicket, DomainName, UserName, FirstName, LastName, EmailAddress, Password, ReadOnlyUser, AuthenticationSource})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateUser(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal FirstName As String, ByVal LastName As String, ByVal EmailAddress As String, ByVal Password As String, ByVal ReadOnlyUser As Boolean, ByVal AuthenticationSource As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateUser", New Object() {AuthenticationTicket, DomainName, UserName, FirstName, LastName, EmailAddress, Password, ReadOnlyUser, AuthenticationSource}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateUser(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateUserAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal FirstName As String, ByVal LastName As String, ByVal EmailAddress As String, ByVal Password As String, ByVal ReadOnlyUser As Boolean, ByVal AuthenticationSource As String)
            Me.CreateUserAsync(AuthenticationTicket, DomainName, UserName, FirstName, LastName, EmailAddress, Password, ReadOnlyUser, AuthenticationSource, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateUserAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal FirstName As String, ByVal LastName As String, ByVal EmailAddress As String, ByVal Password As String, ByVal ReadOnlyUser As Boolean, ByVal AuthenticationSource As String, ByVal userState As Object)
            If (Me.CreateUserOperationCompleted Is Nothing) Then
                Me.CreateUserOperationCompleted = AddressOf Me.OnCreateUserOperationCompleted
            End If
            Me.InvokeAsync("CreateUser", New Object() {AuthenticationTicket, DomainName, UserName, FirstName, LastName, EmailAddress, Password, ReadOnlyUser, AuthenticationSource}, Me.CreateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateUserCompleted(Me, New CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserProfile(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewUserName As String, ByVal NewFirstName As String, ByVal NewLastName As String, ByVal AuthenticateSource As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateUserProfile", New Object() {AuthenticationTicket, UserName, NewUserName, NewFirstName, NewLastName, AuthenticateSource})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateUserProfile(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewUserName As String, ByVal NewFirstName As String, ByVal NewLastName As String, ByVal AuthenticateSource As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateUserProfile", New Object() {AuthenticationTicket, UserName, NewUserName, NewFirstName, NewLastName, AuthenticateSource}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateUserProfile(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserProfileAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewUserName As String, ByVal NewFirstName As String, ByVal NewLastName As String, ByVal AuthenticateSource As String)
            Me.UpdateUserProfileAsync(AuthenticationTicket, UserName, NewUserName, NewFirstName, NewLastName, AuthenticateSource, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserProfileAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewUserName As String, ByVal NewFirstName As String, ByVal NewLastName As String, ByVal AuthenticateSource As String, ByVal userState As Object)
            If (Me.UpdateUserProfileOperationCompleted Is Nothing) Then
                Me.UpdateUserProfileOperationCompleted = AddressOf Me.OnUpdateUserProfileOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserProfile", New Object() {AuthenticationTicket, UserName, NewUserName, NewFirstName, NewLastName, AuthenticateSource}, Me.UpdateUserProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserProfileCompleted(Me, New UpdateUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeUserStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeUserStatus(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal StatusCode As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ChangeUserStatus", New Object() {AuthenticationTicket, UserName, StatusCode})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginChangeUserStatus(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal StatusCode As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ChangeUserStatus", New Object() {AuthenticationTicket, UserName, StatusCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndChangeUserStatus(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeUserStatusAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal StatusCode As Integer)
            Me.ChangeUserStatusAsync(AuthenticationTicket, UserName, StatusCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUserStatusAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal StatusCode As Integer, ByVal userState As Object)
            If (Me.ChangeUserStatusOperationCompleted Is Nothing) Then
                Me.ChangeUserStatusOperationCompleted = AddressOf Me.OnChangeUserStatusOperationCompleted
            End If
            Me.InvokeAsync("ChangeUserStatus", New Object() {AuthenticationTicket, UserName, StatusCode}, Me.ChangeUserStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUserStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUserStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUserStatusCompleted(Me, New ChangeUserStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeUserPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeUserPassword(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewPassword As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ChangeUserPassword", New Object() {AuthenticationTicket, UserName, NewPassword})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginChangeUserPassword(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewPassword As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ChangeUserPassword", New Object() {AuthenticationTicket, UserName, NewPassword}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndChangeUserPassword(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeUserPasswordAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewPassword As String)
            Me.ChangeUserPasswordAsync(AuthenticationTicket, UserName, NewPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUserPasswordAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewPassword As String, ByVal userState As Object)
            If (Me.ChangeUserPasswordOperationCompleted Is Nothing) Then
                Me.ChangeUserPasswordOperationCompleted = AddressOf Me.OnChangeUserPasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangeUserPassword", New Object() {AuthenticationTicket, UserName, NewPassword}, Me.ChangeUserPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUserPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUserPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUserPasswordCompleted(Me, New ChangeUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserEmail(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewEmailAddress As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateUserEmail", New Object() {AuthenticationTicket, UserName, NewEmailAddress})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateUserEmail(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewEmailAddress As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateUserEmail", New Object() {AuthenticationTicket, UserName, NewEmailAddress}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateUserEmail(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserEmailAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewEmailAddress As String)
            Me.UpdateUserEmailAsync(AuthenticationTicket, UserName, NewEmailAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserEmailAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal NewEmailAddress As String, ByVal userState As Object)
            If (Me.UpdateUserEmailOperationCompleted Is Nothing) Then
                Me.UpdateUserEmailOperationCompleted = AddressOf Me.OnUpdateUserEmailOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserEmail", New Object() {AuthenticationTicket, UserName, NewEmailAddress}, Me.UpdateUserEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserEmailCompleted(Me, New UpdateUserEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserPreferences", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserPreferences(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal xmlPreferences As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateUserPreferences", New Object() {AuthenticationTicket, UserName, xmlPreferences})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateUserPreferences(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal xmlPreferences As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateUserPreferences", New Object() {AuthenticationTicket, UserName, xmlPreferences}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateUserPreferences(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserPreferencesAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal xmlPreferences As String)
            Me.UpdateUserPreferencesAsync(AuthenticationTicket, UserName, xmlPreferences, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserPreferencesAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal xmlPreferences As String, ByVal userState As Object)
            If (Me.UpdateUserPreferencesOperationCompleted Is Nothing) Then
                Me.UpdateUserPreferencesOperationCompleted = AddressOf Me.OnUpdateUserPreferencesOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserPreferences", New Object() {AuthenticationTicket, UserName, xmlPreferences}, Me.UpdateUserPreferencesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserPreferencesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserPreferencesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserPreferencesCompleted(Me, New UpdateUserPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUser(ByVal AuthenticationTicket As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteUser", New Object() {AuthenticationTicket, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteUser(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteUser", New Object() {AuthenticationTicket, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteUser(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal AuthenticationTicket As String, ByVal UserName As String)
            Me.DeleteUserAsync(AuthenticationTicket, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.DeleteUserOperationCompleted Is Nothing) Then
                Me.DeleteUserOperationCompleted = AddressOf Me.OnDeleteUserOperationCompleted
            End If
            Me.InvokeAsync("DeleteUser", New Object() {AuthenticationTicket, UserName}, Me.DeleteUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserCompleted(Me, New DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserGroup(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserGroup", New Object() {AuthenticationTicket, DomainName, GroupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserGroup(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserGroup", New Object() {AuthenticationTicket, DomainName, GroupName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserGroup(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String)
            Me.GetUserGroupAsync(AuthenticationTicket, DomainName, GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal userState As Object)
            If (Me.GetUserGroupOperationCompleted Is Nothing) Then
                Me.GetUserGroupOperationCompleted = AddressOf Me.OnGetUserGroupOperationCompleted
            End If
            Me.InvokeAsync("GetUserGroup", New Object() {AuthenticationTicket, DomainName, GroupName}, Me.GetUserGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserGroupCompleted(Me, New GetUserGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGlobalGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGlobalGroups(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGlobalGroups", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetGlobalGroups(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGlobalGroups", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGlobalGroups(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGlobalGroupsAsync(ByVal AuthenticationTicket As String)
            Me.GetGlobalGroupsAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGlobalGroupsAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetGlobalGroupsOperationCompleted Is Nothing) Then
                Me.GetGlobalGroupsOperationCompleted = AddressOf Me.OnGetGlobalGroupsOperationCompleted
            End If
            Me.InvokeAsync("GetGlobalGroups", New Object() {AuthenticationTicket}, Me.GetGlobalGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGlobalGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGlobalGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGlobalGroupsCompleted(Me, New GetGlobalGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDomainGroups(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDomainGroups", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDomainGroups(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDomainGroups", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDomainGroups(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDomainGroupsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetDomainGroupsAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDomainGroupsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetDomainGroupsOperationCompleted Is Nothing) Then
                Me.GetDomainGroupsOperationCompleted = AddressOf Me.OnGetDomainGroupsOperationCompleted
            End If
            Me.InvokeAsync("GetDomainGroups", New Object() {AuthenticationTicket, DomainName}, Me.GetDomainGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDomainGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDomainGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDomainGroupsCompleted(Me, New GetDomainGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLocalGroups", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLocalGroups(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetLocalGroups", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLocalGroups(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLocalGroups", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLocalGroups(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLocalGroupsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetLocalGroupsAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLocalGroupsAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetLocalGroupsOperationCompleted Is Nothing) Then
                Me.GetLocalGroupsOperationCompleted = AddressOf Me.OnGetLocalGroupsOperationCompleted
            End If
            Me.InvokeAsync("GetLocalGroups", New Object() {AuthenticationTicket, DomainName}, Me.GetLocalGroupsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLocalGroupsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLocalGroupsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLocalGroupsCompleted(Me, New GetLocalGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUserGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateUserGroup(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateUserGroup", New Object() {AuthenticationTicket, DomainName, GroupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateUserGroup(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateUserGroup", New Object() {AuthenticationTicket, DomainName, GroupName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateUserGroup(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateUserGroupAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String)
            Me.CreateUserGroupAsync(AuthenticationTicket, DomainName, GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateUserGroupAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal userState As Object)
            If (Me.CreateUserGroupOperationCompleted Is Nothing) Then
                Me.CreateUserGroupOperationCompleted = AddressOf Me.OnCreateUserGroupOperationCompleted
            End If
            Me.InvokeAsync("CreateUserGroup", New Object() {AuthenticationTicket, DomainName, GroupName}, Me.CreateUserGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateUserGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateUserGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateUserGroupCompleted(Me, New CreateUserGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUsergroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUsergroup(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteUsergroup", New Object() {AuthenticationTicket, DomainName, GroupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteUsergroup(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteUsergroup", New Object() {AuthenticationTicket, DomainName, GroupName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteUsergroup(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUsergroupAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String)
            Me.DeleteUsergroupAsync(AuthenticationTicket, DomainName, GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUsergroupAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal userState As Object)
            If (Me.DeleteUsergroupOperationCompleted Is Nothing) Then
                Me.DeleteUsergroupOperationCompleted = AddressOf Me.OnDeleteUsergroupOperationCompleted
            End If
            Me.InvokeAsync("DeleteUsergroup", New Object() {AuthenticationTicket, DomainName, GroupName}, Me.DeleteUsergroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUsergroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUsergroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUsergroupCompleted(Me, New DeleteUsergroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserGroupName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserGroupName(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal NewGroupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateUserGroupName", New Object() {AuthenticationTicket, DomainName, GroupName, NewGroupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateUserGroupName(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal NewGroupName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateUserGroupName", New Object() {AuthenticationTicket, DomainName, GroupName, NewGroupName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateUserGroupName(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserGroupNameAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal NewGroupName As String)
            Me.UpdateUserGroupNameAsync(AuthenticationTicket, DomainName, GroupName, NewGroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserGroupNameAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal NewGroupName As String, ByVal userState As Object)
            If (Me.UpdateUserGroupNameOperationCompleted Is Nothing) Then
                Me.UpdateUserGroupNameOperationCompleted = AddressOf Me.OnUpdateUserGroupNameOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserGroupName", New Object() {AuthenticationTicket, DomainName, GroupName, NewGroupName}, Me.UpdateUserGroupNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserGroupNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserGroupNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserGroupNameCompleted(Me, New UpdateUserGroupNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGroupMembers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserGroupMembers(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUserGroupMembers", New Object() {AuthenticationTicket, DomainName, GroupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserGroupMembers(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserGroupMembers", New Object() {AuthenticationTicket, DomainName, GroupName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserGroupMembers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupMembersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String)
            Me.GetUserGroupMembersAsync(AuthenticationTicket, DomainName, GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupMembersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal userState As Object)
            If (Me.GetUserGroupMembersOperationCompleted Is Nothing) Then
                Me.GetUserGroupMembersOperationCompleted = AddressOf Me.OnGetUserGroupMembersOperationCompleted
            End If
            Me.InvokeAsync("GetUserGroupMembers", New Object() {AuthenticationTicket, DomainName, GroupName}, Me.GetUserGroupMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserGroupMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserGroupMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserGroupMembersCompleted(Me, New GetUserGroupMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUsergroupMember", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUsergroupMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddUsergroupMember", New Object() {AuthenticationTicket, DomainName, GroupName, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddUsergroupMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddUsergroupMember", New Object() {AuthenticationTicket, DomainName, GroupName, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddUsergroupMember(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUsergroupMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String)
            Me.AddUsergroupMemberAsync(AuthenticationTicket, DomainName, GroupName, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUsergroupMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.AddUsergroupMemberOperationCompleted Is Nothing) Then
                Me.AddUsergroupMemberOperationCompleted = AddressOf Me.OnAddUsergroupMemberOperationCompleted
            End If
            Me.InvokeAsync("AddUsergroupMember", New Object() {AuthenticationTicket, DomainName, GroupName, UserName}, Me.AddUsergroupMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUsergroupMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUsergroupMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUsergroupMemberCompleted(Me, New AddUsergroupMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUsergroupMember", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveUsergroupMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveUsergroupMember", New Object() {AuthenticationTicket, DomainName, GroupName, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveUsergroupMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveUsergroupMember", New Object() {AuthenticationTicket, DomainName, GroupName, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveUsergroupMember(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveUsergroupMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String)
            Me.RemoveUsergroupMemberAsync(AuthenticationTicket, DomainName, GroupName, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUsergroupMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.RemoveUsergroupMemberOperationCompleted Is Nothing) Then
                Me.RemoveUsergroupMemberOperationCompleted = AddressOf Me.OnRemoveUsergroupMemberOperationCompleted
            End If
            Me.InvokeAsync("RemoveUsergroupMember", New Object() {AuthenticationTicket, DomainName, GroupName, UserName}, Me.RemoveUsergroupMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUsergroupMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUsergroupMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUsergroupMemberCompleted(Me, New RemoveUsergroupMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainMembers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDomainMembers(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDomainMembers", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDomainMembers(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDomainMembers", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDomainMembers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDomainMembersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetDomainMembersAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDomainMembersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetDomainMembersOperationCompleted Is Nothing) Then
                Me.GetDomainMembersOperationCompleted = AddressOf Me.OnGetDomainMembersOperationCompleted
            End If
            Me.InvokeAsync("GetDomainMembers", New Object() {AuthenticationTicket, DomainName}, Me.GetDomainMembersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDomainMembersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDomainMembersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDomainMembersCompleted(Me, New GetDomainMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDomainUsers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDomainUsers(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDomainUsers", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDomainUsers(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDomainUsers", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDomainUsers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDomainUsersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetDomainUsersAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDomainUsersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetDomainUsersOperationCompleted Is Nothing) Then
                Me.GetDomainUsersOperationCompleted = AddressOf Me.OnGetDomainUsersOperationCompleted
            End If
            Me.InvokeAsync("GetDomainUsers", New Object() {AuthenticationTicket, DomainName}, Me.GetDomainUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDomainUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDomainUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDomainUsersCompleted(Me, New GetDomainUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLocalUsers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLocalUsers(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetLocalUsers", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLocalUsers(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLocalUsers", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLocalUsers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLocalUsersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetLocalUsersAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLocalUsersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetLocalUsersOperationCompleted Is Nothing) Then
                Me.GetLocalUsersOperationCompleted = AddressOf Me.OnGetLocalUsersOperationCompleted
            End If
            Me.InvokeAsync("GetLocalUsers", New Object() {AuthenticationTicket, DomainName}, Me.GetLocalUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLocalUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLocalUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLocalUsersCompleted(Me, New GetLocalUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetManagers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetManagers(ByVal AuthenticationTicket As String, ByVal DomainName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetManagers", New Object() {AuthenticationTicket, DomainName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetManagers(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetManagers", New Object() {AuthenticationTicket, DomainName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetManagers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManagersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String)
            Me.GetManagersAsync(AuthenticationTicket, DomainName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManagersAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal userState As Object)
            If (Me.GetManagersOperationCompleted Is Nothing) Then
                Me.GetManagersOperationCompleted = AddressOf Me.OnGetManagersOperationCompleted
            End If
            Me.InvokeAsync("GetManagers", New Object() {AuthenticationTicket, DomainName}, Me.GetManagersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManagersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManagersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManagersCompleted(Me, New GetManagersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserAsDomainMember", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUserAsDomainMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddUserAsDomainMember", New Object() {AuthenticationTicket, DomainName, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddUserAsDomainMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddUserAsDomainMember", New Object() {AuthenticationTicket, DomainName, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddUserAsDomainMember(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUserAsDomainMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String)
            Me.AddUserAsDomainMemberAsync(AuthenticationTicket, DomainName, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserAsDomainMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.AddUserAsDomainMemberOperationCompleted Is Nothing) Then
                Me.AddUserAsDomainMemberOperationCompleted = AddressOf Me.OnAddUserAsDomainMemberOperationCompleted
            End If
            Me.InvokeAsync("AddUserAsDomainMember", New Object() {AuthenticationTicket, DomainName, UserName}, Me.AddUserAsDomainMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserAsDomainMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserAsDomainMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserAsDomainMemberCompleted(Me, New AddUserAsDomainMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserFromDomainMembership", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveUserFromDomainMembership(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Username As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveUserFromDomainMembership", New Object() {AuthenticationTicket, DomainName, Username})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveUserFromDomainMembership(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Username As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveUserFromDomainMembership", New Object() {AuthenticationTicket, DomainName, Username}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveUserFromDomainMembership(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromDomainMembershipAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Username As String)
            Me.RemoveUserFromDomainMembershipAsync(AuthenticationTicket, DomainName, Username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromDomainMembershipAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal Username As String, ByVal userState As Object)
            If (Me.RemoveUserFromDomainMembershipOperationCompleted Is Nothing) Then
                Me.RemoveUserFromDomainMembershipOperationCompleted = AddressOf Me.OnRemoveUserFromDomainMembershipOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserFromDomainMembership", New Object() {AuthenticationTicket, DomainName, Username}, Me.RemoveUserFromDomainMembershipOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserFromDomainMembershipOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserFromDomainMembershipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserFromDomainMembershipCompleted(Me, New RemoveUserFromDomainMembershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserGroupAsDomainMember", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUserGroupAsDomainMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddUserGroupAsDomainMember", New Object() {AuthenticationTicket, DomainName, GroupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddUserGroupAsDomainMember(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddUserGroupAsDomainMember", New Object() {AuthenticationTicket, DomainName, GroupName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddUserGroupAsDomainMember(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUserGroupAsDomainMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String)
            Me.AddUserGroupAsDomainMemberAsync(AuthenticationTicket, DomainName, GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserGroupAsDomainMemberAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal userState As Object)
            If (Me.AddUserGroupAsDomainMemberOperationCompleted Is Nothing) Then
                Me.AddUserGroupAsDomainMemberOperationCompleted = AddressOf Me.OnAddUserGroupAsDomainMemberOperationCompleted
            End If
            Me.InvokeAsync("AddUserGroupAsDomainMember", New Object() {AuthenticationTicket, DomainName, GroupName}, Me.AddUserGroupAsDomainMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserGroupAsDomainMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserGroupAsDomainMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserGroupAsDomainMemberCompleted(Me, New AddUserGroupAsDomainMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserGroupFromDomainMembership", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveUserGroupFromDomainMembership(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveUserGroupFromDomainMembership", New Object() {AuthenticationTicket, DomainName, GroupName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveUserGroupFromDomainMembership(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveUserGroupFromDomainMembership", New Object() {AuthenticationTicket, DomainName, GroupName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveUserGroupFromDomainMembership(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveUserGroupFromDomainMembershipAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String)
            Me.RemoveUserGroupFromDomainMembershipAsync(AuthenticationTicket, DomainName, GroupName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserGroupFromDomainMembershipAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal GroupName As String, ByVal userState As Object)
            If (Me.RemoveUserGroupFromDomainMembershipOperationCompleted Is Nothing) Then
                Me.RemoveUserGroupFromDomainMembershipOperationCompleted = AddressOf Me.OnRemoveUserGroupFromDomainMembershipOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserGroupFromDomainMembership", New Object() {AuthenticationTicket, DomainName, GroupName}, Me.RemoveUserGroupFromDomainMembershipOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserGroupFromDomainMembershipOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserGroupFromDomainMembershipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserGroupFromDomainMembershipCompleted(Me, New RemoveUserGroupFromDomainMembershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddManagerToDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddManagerToDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddManagerToDomain", New Object() {AuthenticationTicket, DomainName, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddManagerToDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddManagerToDomain", New Object() {AuthenticationTicket, DomainName, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddManagerToDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddManagerToDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String)
            Me.AddManagerToDomainAsync(AuthenticationTicket, DomainName, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddManagerToDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.AddManagerToDomainOperationCompleted Is Nothing) Then
                Me.AddManagerToDomainOperationCompleted = AddressOf Me.OnAddManagerToDomainOperationCompleted
            End If
            Me.InvokeAsync("AddManagerToDomain", New Object() {AuthenticationTicket, DomainName, UserName}, Me.AddManagerToDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddManagerToDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddManagerToDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddManagerToDomainCompleted(Me, New AddManagerToDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveManagerFromDomain", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveManagerFromDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveManagerFromDomain", New Object() {AuthenticationTicket, DomainName, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveManagerFromDomain(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveManagerFromDomain", New Object() {AuthenticationTicket, DomainName, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveManagerFromDomain(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveManagerFromDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String)
            Me.RemoveManagerFromDomainAsync(AuthenticationTicket, DomainName, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveManagerFromDomainAsync(ByVal AuthenticationTicket As String, ByVal DomainName As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.RemoveManagerFromDomainOperationCompleted Is Nothing) Then
                Me.RemoveManagerFromDomainOperationCompleted = AddressOf Me.OnRemoveManagerFromDomainOperationCompleted
            End If
            Me.InvokeAsync("RemoveManagerFromDomain", New Object() {AuthenticationTicket, DomainName, UserName}, Me.RemoveManagerFromDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveManagerFromDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveManagerFromDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveManagerFromDomainCompleted(Me, New RemoveManagerFromDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Search", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Search(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Search", New Object() {AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSearch(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Search", New Object() {AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSearch(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SearchAsync(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean)
            Me.SearchAsync(AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SearchAsync(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean, ByVal userState As Object)
            If (Me.SearchOperationCompleted Is Nothing) Then
                Me.SearchOperationCompleted = AddressOf Me.OnSearchOperationCompleted
            End If
            Me.InvokeAsync("Search", New Object() {AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder}, Me.SearchOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchCompleted(Me, New SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNextSearchPage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextSearchPage(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetNextSearchPage", New Object() {AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetNextSearchPage(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetNextSearchPage", New Object() {AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetNextSearchPage(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextSearchPageAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetNextSearchPageAsync(AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextSearchPageAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetNextSearchPageOperationCompleted Is Nothing) Then
                Me.GetNextSearchPageOperationCompleted = AddressOf Me.OnGetNextSearchPageOperationCompleted
            End If
            Me.InvokeAsync("GetNextSearchPage", New Object() {AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions}, Me.GetNextSearchPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextSearchPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextSearchPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextSearchPageCompleted(Me, New GetNextSearchPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPreviousSearchPage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreviousSearchPage(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPreviousSearchPage", New Object() {AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPreviousSearchPage(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPreviousSearchPage", New Object() {AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPreviousSearchPage(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreviousSearchPageAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetPreviousSearchPageAsync(AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreviousSearchPageAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetPreviousSearchPageOperationCompleted Is Nothing) Then
                Me.GetPreviousSearchPageOperationCompleted = AddressOf Me.OnGetPreviousSearchPageOperationCompleted
            End If
            Me.InvokeAsync("GetPreviousSearchPage", New Object() {AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions}, Me.GetPreviousSearchPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreviousSearchPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreviousSearchPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreviousSearchPageCompleted(Me, New GetPreviousSearchPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRandDScheduleInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRandDScheduleInfo(ByVal AuthenticationTicket As String, ByVal RDDefId As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRandDScheduleInfo", New Object() {AuthenticationTicket, RDDefId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRandDScheduleInfo(ByVal AuthenticationTicket As String, ByVal RDDefId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRandDScheduleInfo", New Object() {AuthenticationTicket, RDDefId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRandDScheduleInfo(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRandDScheduleInfoAsync(ByVal AuthenticationTicket As String, ByVal RDDefId As Integer)
            Me.GetRandDScheduleInfoAsync(AuthenticationTicket, RDDefId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRandDScheduleInfoAsync(ByVal AuthenticationTicket As String, ByVal RDDefId As Integer, ByVal userState As Object)
            If (Me.GetRandDScheduleInfoOperationCompleted Is Nothing) Then
                Me.GetRandDScheduleInfoOperationCompleted = AddressOf Me.OnGetRandDScheduleInfoOperationCompleted
            End If
            Me.InvokeAsync("GetRandDScheduleInfo", New Object() {AuthenticationTicket, RDDefId}, Me.GetRandDScheduleInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRandDScheduleInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRandDScheduleInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRandDScheduleInfoCompleted(Me, New GetRandDScheduleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRandDSchedules", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRandDSchedules(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRandDSchedules", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRandDSchedules(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRandDSchedules", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRandDSchedules(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRandDSchedulesAsync(ByVal AuthenticationTicket As String)
            Me.GetRandDSchedulesAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRandDSchedulesAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetRandDSchedulesOperationCompleted Is Nothing) Then
                Me.GetRandDSchedulesOperationCompleted = AddressOf Me.OnGetRandDSchedulesOperationCompleted
            End If
            Me.InvokeAsync("GetRandDSchedules", New Object() {AuthenticationTicket}, Me.GetRandDSchedulesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRandDSchedulesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRandDSchedulesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRandDSchedulesCompleted(Me, New GetRandDSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateRandDSchedule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateRandDSchedule(ByVal AuthenticationTicket As String, ByVal RDDefXML As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateRandDSchedule", New Object() {AuthenticationTicket, RDDefXML})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateRandDSchedule(ByVal AuthenticationTicket As String, ByVal RDDefXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateRandDSchedule", New Object() {AuthenticationTicket, RDDefXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateRandDSchedule(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal RDDefXML As String)
            Me.CreateRandDScheduleAsync(AuthenticationTicket, RDDefXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal RDDefXML As String, ByVal userState As Object)
            If (Me.CreateRandDScheduleOperationCompleted Is Nothing) Then
                Me.CreateRandDScheduleOperationCompleted = AddressOf Me.OnCreateRandDScheduleOperationCompleted
            End If
            Me.InvokeAsync("CreateRandDSchedule", New Object() {AuthenticationTicket, RDDefXML}, Me.CreateRandDScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateRandDScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateRandDScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateRandDScheduleCompleted(Me, New CreateRandDScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRandDSchedule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRandDSchedule(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer, ByVal ApplyToExistingDocumentFolders As Boolean, ByVal NewRDDefXML As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateRandDSchedule", New Object() {AuthenticationTicket, RDdefId, ApplyToExistingDocumentFolders, NewRDDefXML})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateRandDSchedule(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer, ByVal ApplyToExistingDocumentFolders As Boolean, ByVal NewRDDefXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateRandDSchedule", New Object() {AuthenticationTicket, RDdefId, ApplyToExistingDocumentFolders, NewRDDefXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateRandDSchedule(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer, ByVal ApplyToExistingDocumentFolders As Boolean, ByVal NewRDDefXML As String)
            Me.UpdateRandDScheduleAsync(AuthenticationTicket, RDdefId, ApplyToExistingDocumentFolders, NewRDDefXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer, ByVal ApplyToExistingDocumentFolders As Boolean, ByVal NewRDDefXML As String, ByVal userState As Object)
            If (Me.UpdateRandDScheduleOperationCompleted Is Nothing) Then
                Me.UpdateRandDScheduleOperationCompleted = AddressOf Me.OnUpdateRandDScheduleOperationCompleted
            End If
            Me.InvokeAsync("UpdateRandDSchedule", New Object() {AuthenticationTicket, RDdefId, ApplyToExistingDocumentFolders, NewRDDefXML}, Me.UpdateRandDScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRandDScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRandDScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRandDScheduleCompleted(Me, New UpdateRandDScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteRandDSchedule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteRandDSchedule(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteRandDSchedule", New Object() {AuthenticationTicket, RDdefId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteRandDSchedule(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteRandDSchedule", New Object() {AuthenticationTicket, RDdefId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteRandDSchedule(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer)
            Me.DeleteRandDScheduleAsync(AuthenticationTicket, RDdefId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal RDdefId As Integer, ByVal userState As Object)
            If (Me.DeleteRandDScheduleOperationCompleted Is Nothing) Then
                Me.DeleteRandDScheduleOperationCompleted = AddressOf Me.OnDeleteRandDScheduleOperationCompleted
            End If
            Me.InvokeAsync("DeleteRandDSchedule", New Object() {AuthenticationTicket, RDdefId}, Me.DeleteRandDScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteRandDScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteRandDScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteRandDScheduleCompleted(Me, New DeleteRandDScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentTypes", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentTypes(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentTypes", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentTypes(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentTypes", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentTypes(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentTypesAsync(ByVal AuthenticationTicket As String)
            Me.GetDocumentTypesAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentTypesAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetDocumentTypesOperationCompleted Is Nothing) Then
                Me.GetDocumentTypesOperationCompleted = AddressOf Me.OnGetDocumentTypesOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentTypes", New Object() {AuthenticationTicket}, Me.GetDocumentTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentTypesCompleted(Me, New GetDocumentTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDocumentTypeDef", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateDocumentTypeDef(ByVal AuthenticationTicket As String, ByVal DocumentTypeName As String, ByVal RequiredPropertySetName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateDocumentTypeDef", New Object() {AuthenticationTicket, DocumentTypeName, RequiredPropertySetName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateDocumentTypeDef(ByVal AuthenticationTicket As String, ByVal DocumentTypeName As String, ByVal RequiredPropertySetName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateDocumentTypeDef", New Object() {AuthenticationTicket, DocumentTypeName, RequiredPropertySetName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateDocumentTypeDef(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentTypeDefAsync(ByVal AuthenticationTicket As String, ByVal DocumentTypeName As String, ByVal RequiredPropertySetName As String)
            Me.CreateDocumentTypeDefAsync(AuthenticationTicket, DocumentTypeName, RequiredPropertySetName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentTypeDefAsync(ByVal AuthenticationTicket As String, ByVal DocumentTypeName As String, ByVal RequiredPropertySetName As String, ByVal userState As Object)
            If (Me.CreateDocumentTypeDefOperationCompleted Is Nothing) Then
                Me.CreateDocumentTypeDefOperationCompleted = AddressOf Me.OnCreateDocumentTypeDefOperationCompleted
            End If
            Me.InvokeAsync("CreateDocumentTypeDef", New Object() {AuthenticationTicket, DocumentTypeName, RequiredPropertySetName}, Me.CreateDocumentTypeDefOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateDocumentTypeDefOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateDocumentTypeDefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateDocumentTypeDefCompleted(Me, New CreateDocumentTypeDefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDocumentTypeDef", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDocumentTypeDef(ByVal AuthenticationTicket As String, ByVal DocumentTypeId As Integer, ByVal NewDocumentTypeName As String, ByVal NewRequiredPropertySetName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateDocumentTypeDef", New Object() {AuthenticationTicket, DocumentTypeId, NewDocumentTypeName, NewRequiredPropertySetName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDocumentTypeDef(ByVal AuthenticationTicket As String, ByVal DocumentTypeId As Integer, ByVal NewDocumentTypeName As String, ByVal NewRequiredPropertySetName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDocumentTypeDef", New Object() {AuthenticationTicket, DocumentTypeId, NewDocumentTypeName, NewRequiredPropertySetName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDocumentTypeDef(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentTypeDefAsync(ByVal AuthenticationTicket As String, ByVal DocumentTypeId As Integer, ByVal NewDocumentTypeName As String, ByVal NewRequiredPropertySetName As String)
            Me.UpdateDocumentTypeDefAsync(AuthenticationTicket, DocumentTypeId, NewDocumentTypeName, NewRequiredPropertySetName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentTypeDefAsync(ByVal AuthenticationTicket As String, ByVal DocumentTypeId As Integer, ByVal NewDocumentTypeName As String, ByVal NewRequiredPropertySetName As String, ByVal userState As Object)
            If (Me.UpdateDocumentTypeDefOperationCompleted Is Nothing) Then
                Me.UpdateDocumentTypeDefOperationCompleted = AddressOf Me.OnUpdateDocumentTypeDefOperationCompleted
            End If
            Me.InvokeAsync("UpdateDocumentTypeDef", New Object() {AuthenticationTicket, DocumentTypeId, NewDocumentTypeName, NewRequiredPropertySetName}, Me.UpdateDocumentTypeDefOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDocumentTypeDefOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDocumentTypeDefCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDocumentTypeDefCompleted(Me, New UpdateDocumentTypeDefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTagDefintions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTagDefintions(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetTagDefintions", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTagDefintions(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTagDefintions", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTagDefintions(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTagDefintionsAsync(ByVal AuthenticationTicket As String)
            Me.GetTagDefintionsAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTagDefintionsAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetTagDefintionsOperationCompleted Is Nothing) Then
                Me.GetTagDefintionsOperationCompleted = AddressOf Me.OnGetTagDefintionsOperationCompleted
            End If
            Me.InvokeAsync("GetTagDefintions", New Object() {AuthenticationTicket}, Me.GetTagDefintionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTagDefintionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTagDefintionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTagDefintionsCompleted(Me, New GetTagDefintionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPropertySetDefinitions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertySetDefinitions(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPropertySetDefinitions", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPropertySetDefinitions(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPropertySetDefinitions", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPropertySetDefinitions(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetDefinitionsAsync(ByVal AuthenticationTicket As String)
            Me.GetPropertySetDefinitionsAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetDefinitionsAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetPropertySetDefinitionsOperationCompleted Is Nothing) Then
                Me.GetPropertySetDefinitionsOperationCompleted = AddressOf Me.OnGetPropertySetDefinitionsOperationCompleted
            End If
            Me.InvokeAsync("GetPropertySetDefinitions", New Object() {AuthenticationTicket}, Me.GetPropertySetDefinitionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertySetDefinitionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertySetDefinitionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertySetDefinitionsCompleted(Me, New GetPropertySetDefinitionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPropertySetDefinitions1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertySetDefinitions1(ByVal AuthenticationTicket As String, ByVal DomainNameFilter As String, ByVal AppliesToDocuments As Boolean, ByVal AppliesToFolders As Boolean, ByVal AppliesToUsers As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPropertySetDefinitions1", New Object() {AuthenticationTicket, DomainNameFilter, AppliesToDocuments, AppliesToFolders, AppliesToUsers})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPropertySetDefinitions1(ByVal AuthenticationTicket As String, ByVal DomainNameFilter As String, ByVal AppliesToDocuments As Boolean, ByVal AppliesToFolders As Boolean, ByVal AppliesToUsers As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPropertySetDefinitions1", New Object() {AuthenticationTicket, DomainNameFilter, AppliesToDocuments, AppliesToFolders, AppliesToUsers}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPropertySetDefinitions1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetDefinitions1Async(ByVal AuthenticationTicket As String, ByVal DomainNameFilter As String, ByVal AppliesToDocuments As Boolean, ByVal AppliesToFolders As Boolean, ByVal AppliesToUsers As Boolean)
            Me.GetPropertySetDefinitions1Async(AuthenticationTicket, DomainNameFilter, AppliesToDocuments, AppliesToFolders, AppliesToUsers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetDefinitions1Async(ByVal AuthenticationTicket As String, ByVal DomainNameFilter As String, ByVal AppliesToDocuments As Boolean, ByVal AppliesToFolders As Boolean, ByVal AppliesToUsers As Boolean, ByVal userState As Object)
            If (Me.GetPropertySetDefinitions1OperationCompleted Is Nothing) Then
                Me.GetPropertySetDefinitions1OperationCompleted = AddressOf Me.OnGetPropertySetDefinitions1OperationCompleted
            End If
            Me.InvokeAsync("GetPropertySetDefinitions1", New Object() {AuthenticationTicket, DomainNameFilter, AppliesToDocuments, AppliesToFolders, AppliesToUsers}, Me.GetPropertySetDefinitions1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertySetDefinitions1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertySetDefinitions1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertySetDefinitions1Completed(Me, New GetPropertySetDefinitions1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPropertySetFieldOptions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertySetFieldOptions(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertyFieldName As String, ByVal OptionFilter As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPropertySetFieldOptions", New Object() {AuthenticationTicket, PropertySetName, PropertyFieldName, OptionFilter})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPropertySetFieldOptions(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertyFieldName As String, ByVal OptionFilter As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPropertySetFieldOptions", New Object() {AuthenticationTicket, PropertySetName, PropertyFieldName, OptionFilter}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPropertySetFieldOptions(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetFieldOptionsAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertyFieldName As String, ByVal OptionFilter As String)
            Me.GetPropertySetFieldOptionsAsync(AuthenticationTicket, PropertySetName, PropertyFieldName, OptionFilter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetFieldOptionsAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertyFieldName As String, ByVal OptionFilter As String, ByVal userState As Object)
            If (Me.GetPropertySetFieldOptionsOperationCompleted Is Nothing) Then
                Me.GetPropertySetFieldOptionsOperationCompleted = AddressOf Me.OnGetPropertySetFieldOptionsOperationCompleted
            End If
            Me.InvokeAsync("GetPropertySetFieldOptions", New Object() {AuthenticationTicket, PropertySetName, PropertyFieldName, OptionFilter}, Me.GetPropertySetFieldOptionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertySetFieldOptionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertySetFieldOptionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertySetFieldOptionsCompleted(Me, New GetPropertySetFieldOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPropertySetDefinition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPropertySetDefinition(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String)
            Me.GetPropertySetDefinitionAsync(AuthenticationTicket, PropertySetName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal userState As Object)
            If (Me.GetPropertySetDefinitionOperationCompleted Is Nothing) Then
                Me.GetPropertySetDefinitionOperationCompleted = AddressOf Me.OnGetPropertySetDefinitionOperationCompleted
            End If
            Me.InvokeAsync("GetPropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName}, Me.GetPropertySetDefinitionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertySetDefinitionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertySetDefinitionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertySetDefinitionCompleted(Me, New GetPropertySetDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreatePropertySetDefinition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreatePropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreatePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreatePropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreatePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreatePropertySetDefinition(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreatePropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String)
            Me.CreatePropertySetDefinitionAsync(AuthenticationTicket, PropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreatePropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String, ByVal userState As Object)
            If (Me.CreatePropertySetDefinitionOperationCompleted Is Nothing) Then
                Me.CreatePropertySetDefinitionOperationCompleted = AddressOf Me.OnCreatePropertySetDefinitionOperationCompleted
            End If
            Me.InvokeAsync("CreatePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames}, Me.CreatePropertySetDefinitionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreatePropertySetDefinitionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreatePropertySetDefinitionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreatePropertySetDefinitionCompleted(Me, New CreatePropertySetDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePropertySetDefinition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal NewPropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdatePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName, NewPropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdatePropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal NewPropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdatePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName, NewPropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdatePropertySetDefinition(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal NewPropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String)
            Me.UpdatePropertySetDefinitionAsync(AuthenticationTicket, PropertySetName, NewPropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal NewPropertySetName As String, ByVal PropertySetCaption As String, ByVal AppliestoDocuments As Boolean, ByVal AppliestoFolders As Boolean, ByVal AppliestoUsers As Boolean, ByVal DomainNames As String, ByVal userState As Object)
            If (Me.UpdatePropertySetDefinitionOperationCompleted Is Nothing) Then
                Me.UpdatePropertySetDefinitionOperationCompleted = AddressOf Me.OnUpdatePropertySetDefinitionOperationCompleted
            End If
            Me.InvokeAsync("UpdatePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName, NewPropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames}, Me.UpdatePropertySetDefinitionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePropertySetDefinitionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePropertySetDefinitionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePropertySetDefinitionCompleted(Me, New UpdatePropertySetDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePropertySetDefinition", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeletePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeletePropertySetDefinition(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeletePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeletePropertySetDefinition(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String)
            Me.DeletePropertySetDefinitionAsync(AuthenticationTicket, PropertySetName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetDefinitionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal userState As Object)
            If (Me.DeletePropertySetDefinitionOperationCompleted Is Nothing) Then
                Me.DeletePropertySetDefinitionOperationCompleted = AddressOf Me.OnDeletePropertySetDefinitionOperationCompleted
            End If
            Me.InvokeAsync("DeletePropertySetDefinition", New Object() {AuthenticationTicket, PropertySetName}, Me.DeletePropertySetDefinitionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePropertySetDefinitionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePropertySetDefinitionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePropertySetDefinitionCompleted(Me, New DeletePropertySetDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPropertySetField", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPropertySetField(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal FieldCaption As String, ByVal FieldType As String, ByVal FieldLength As Integer, ByVal isRequired As Boolean, ByVal ControlSize As Integer, ByVal ControlOrder As Integer, ByVal ControlType As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddPropertySetField", New Object() {AuthenticationTicket, PropertySetName, FieldName, FieldCaption, FieldType, FieldLength, isRequired, ControlSize, ControlOrder, ControlType})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddPropertySetField(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal FieldCaption As String, ByVal FieldType As String, ByVal FieldLength As Integer, ByVal isRequired As Boolean, ByVal ControlSize As Integer, ByVal ControlOrder As Integer, ByVal ControlType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddPropertySetField", New Object() {AuthenticationTicket, PropertySetName, FieldName, FieldCaption, FieldType, FieldLength, isRequired, ControlSize, ControlOrder, ControlType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddPropertySetField(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPropertySetFieldAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal FieldCaption As String, ByVal FieldType As String, ByVal FieldLength As Integer, ByVal isRequired As Boolean, ByVal ControlSize As Integer, ByVal ControlOrder As Integer, ByVal ControlType As String)
            Me.AddPropertySetFieldAsync(AuthenticationTicket, PropertySetName, FieldName, FieldCaption, FieldType, FieldLength, isRequired, ControlSize, ControlOrder, ControlType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPropertySetFieldAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal FieldCaption As String, ByVal FieldType As String, ByVal FieldLength As Integer, ByVal isRequired As Boolean, ByVal ControlSize As Integer, ByVal ControlOrder As Integer, ByVal ControlType As String, ByVal userState As Object)
            If (Me.AddPropertySetFieldOperationCompleted Is Nothing) Then
                Me.AddPropertySetFieldOperationCompleted = AddressOf Me.OnAddPropertySetFieldOperationCompleted
            End If
            Me.InvokeAsync("AddPropertySetField", New Object() {AuthenticationTicket, PropertySetName, FieldName, FieldCaption, FieldType, FieldLength, isRequired, ControlSize, ControlOrder, ControlType}, Me.AddPropertySetFieldOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPropertySetFieldOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPropertySetFieldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPropertySetFieldCompleted(Me, New AddPropertySetFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPropertySetLookupFieldParametersForMYSQL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetPropertySetLookupFieldParametersForMYSQL(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal MYSQL_ServerName As String, ByVal MYSQL_PortNumber As String, ByVal MYSQL_UserName As String, ByVal MYSQL_Password As String, ByVal MYSQL_DataBasename As String, ByVal sqlSentence As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetPropertySetLookupFieldParametersForMYSQL", New Object() {AuthenticationTicket, PropertySetName, FieldName, MYSQL_ServerName, MYSQL_PortNumber, MYSQL_UserName, MYSQL_Password, MYSQL_DataBasename, sqlSentence})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPropertySetLookupFieldParametersForMYSQL(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal MYSQL_ServerName As String, ByVal MYSQL_PortNumber As String, ByVal MYSQL_UserName As String, ByVal MYSQL_Password As String, ByVal MYSQL_DataBasename As String, ByVal sqlSentence As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPropertySetLookupFieldParametersForMYSQL", New Object() {AuthenticationTicket, PropertySetName, FieldName, MYSQL_ServerName, MYSQL_PortNumber, MYSQL_UserName, MYSQL_Password, MYSQL_DataBasename, sqlSentence}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPropertySetLookupFieldParametersForMYSQL(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPropertySetLookupFieldParametersForMYSQLAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal MYSQL_ServerName As String, ByVal MYSQL_PortNumber As String, ByVal MYSQL_UserName As String, ByVal MYSQL_Password As String, ByVal MYSQL_DataBasename As String, ByVal sqlSentence As String)
            Me.SetPropertySetLookupFieldParametersForMYSQLAsync(AuthenticationTicket, PropertySetName, FieldName, MYSQL_ServerName, MYSQL_PortNumber, MYSQL_UserName, MYSQL_Password, MYSQL_DataBasename, sqlSentence, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPropertySetLookupFieldParametersForMYSQLAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal MYSQL_ServerName As String, ByVal MYSQL_PortNumber As String, ByVal MYSQL_UserName As String, ByVal MYSQL_Password As String, ByVal MYSQL_DataBasename As String, ByVal sqlSentence As String, ByVal userState As Object)
            If (Me.SetPropertySetLookupFieldParametersForMYSQLOperationCompleted Is Nothing) Then
                Me.SetPropertySetLookupFieldParametersForMYSQLOperationCompleted = AddressOf Me.OnSetPropertySetLookupFieldParametersForMYSQLOperationCompleted
            End If
            Me.InvokeAsync("SetPropertySetLookupFieldParametersForMYSQL", New Object() {AuthenticationTicket, PropertySetName, FieldName, MYSQL_ServerName, MYSQL_PortNumber, MYSQL_UserName, MYSQL_Password, MYSQL_DataBasename, sqlSentence}, Me.SetPropertySetLookupFieldParametersForMYSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPropertySetLookupFieldParametersForMYSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPropertySetLookupFieldParametersForMYSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPropertySetLookupFieldParametersForMYSQLCompleted(Me, New SetPropertySetLookupFieldParametersForMYSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPropertySetLookupFieldParametersForSQLServer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetPropertySetLookupFieldParametersForSQLServer(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal SQLSERVER_ServerName As String, ByVal SQLSERVER_UserName As String, ByVal SQLSERVER_Password As String, ByVal SQLSERVER_DataBasename As String, ByVal sqlSentence As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetPropertySetLookupFieldParametersForSQLServer", New Object() {AuthenticationTicket, PropertySetName, FieldName, SQLSERVER_ServerName, SQLSERVER_UserName, SQLSERVER_Password, SQLSERVER_DataBasename, sqlSentence})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPropertySetLookupFieldParametersForSQLServer(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal SQLSERVER_ServerName As String, ByVal SQLSERVER_UserName As String, ByVal SQLSERVER_Password As String, ByVal SQLSERVER_DataBasename As String, ByVal sqlSentence As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPropertySetLookupFieldParametersForSQLServer", New Object() {AuthenticationTicket, PropertySetName, FieldName, SQLSERVER_ServerName, SQLSERVER_UserName, SQLSERVER_Password, SQLSERVER_DataBasename, sqlSentence}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPropertySetLookupFieldParametersForSQLServer(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPropertySetLookupFieldParametersForSQLServerAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal SQLSERVER_ServerName As String, ByVal SQLSERVER_UserName As String, ByVal SQLSERVER_Password As String, ByVal SQLSERVER_DataBasename As String, ByVal sqlSentence As String)
            Me.SetPropertySetLookupFieldParametersForSQLServerAsync(AuthenticationTicket, PropertySetName, FieldName, SQLSERVER_ServerName, SQLSERVER_UserName, SQLSERVER_Password, SQLSERVER_DataBasename, sqlSentence, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPropertySetLookupFieldParametersForSQLServerAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal SQLSERVER_ServerName As String, ByVal SQLSERVER_UserName As String, ByVal SQLSERVER_Password As String, ByVal SQLSERVER_DataBasename As String, ByVal sqlSentence As String, ByVal userState As Object)
            If (Me.SetPropertySetLookupFieldParametersForSQLServerOperationCompleted Is Nothing) Then
                Me.SetPropertySetLookupFieldParametersForSQLServerOperationCompleted = AddressOf Me.OnSetPropertySetLookupFieldParametersForSQLServerOperationCompleted
            End If
            Me.InvokeAsync("SetPropertySetLookupFieldParametersForSQLServer", New Object() {AuthenticationTicket, PropertySetName, FieldName, SQLSERVER_ServerName, SQLSERVER_UserName, SQLSERVER_Password, SQLSERVER_DataBasename, sqlSentence}, Me.SetPropertySetLookupFieldParametersForSQLServerOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPropertySetLookupFieldParametersForSQLServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPropertySetLookupFieldParametersForSQLServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPropertySetLookupFieldParametersForSQLServerCompleted(Me, New SetPropertySetLookupFieldParametersForSQLServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPropertySetLookupFieldParametersForORACLE", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetPropertySetLookupFieldParametersForORACLE(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal ORACLE_ServiceName As String, ByVal ORACLE_UserName As String, ByVal ORACLE_Password As String, ByVal sqlSentence As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetPropertySetLookupFieldParametersForORACLE", New Object() {AuthenticationTicket, PropertySetName, FieldName, ORACLE_ServiceName, ORACLE_UserName, ORACLE_Password, sqlSentence})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetPropertySetLookupFieldParametersForORACLE(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal ORACLE_ServiceName As String, ByVal ORACLE_UserName As String, ByVal ORACLE_Password As String, ByVal sqlSentence As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetPropertySetLookupFieldParametersForORACLE", New Object() {AuthenticationTicket, PropertySetName, FieldName, ORACLE_ServiceName, ORACLE_UserName, ORACLE_Password, sqlSentence}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetPropertySetLookupFieldParametersForORACLE(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPropertySetLookupFieldParametersForORACLEAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal ORACLE_ServiceName As String, ByVal ORACLE_UserName As String, ByVal ORACLE_Password As String, ByVal sqlSentence As String)
            Me.SetPropertySetLookupFieldParametersForORACLEAsync(AuthenticationTicket, PropertySetName, FieldName, ORACLE_ServiceName, ORACLE_UserName, ORACLE_Password, sqlSentence, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPropertySetLookupFieldParametersForORACLEAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal ORACLE_ServiceName As String, ByVal ORACLE_UserName As String, ByVal ORACLE_Password As String, ByVal sqlSentence As String, ByVal userState As Object)
            If (Me.SetPropertySetLookupFieldParametersForORACLEOperationCompleted Is Nothing) Then
                Me.SetPropertySetLookupFieldParametersForORACLEOperationCompleted = AddressOf Me.OnSetPropertySetLookupFieldParametersForORACLEOperationCompleted
            End If
            Me.InvokeAsync("SetPropertySetLookupFieldParametersForORACLE", New Object() {AuthenticationTicket, PropertySetName, FieldName, ORACLE_ServiceName, ORACLE_UserName, ORACLE_Password, sqlSentence}, Me.SetPropertySetLookupFieldParametersForORACLEOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPropertySetLookupFieldParametersForORACLEOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPropertySetLookupFieldParametersForORACLECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPropertySetLookupFieldParametersForORACLECompleted(Me, New SetPropertySetLookupFieldParametersForORACLECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPropertySetFieldOption", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPropertySetFieldOption(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddPropertySetFieldOption", New Object() {AuthenticationTicket, PropertySetName, FieldName, OptionValue})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddPropertySetFieldOption(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddPropertySetFieldOption", New Object() {AuthenticationTicket, PropertySetName, FieldName, OptionValue}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddPropertySetFieldOption(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPropertySetFieldOptionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String)
            Me.AddPropertySetFieldOptionAsync(AuthenticationTicket, PropertySetName, FieldName, OptionValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPropertySetFieldOptionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String, ByVal userState As Object)
            If (Me.AddPropertySetFieldOptionOperationCompleted Is Nothing) Then
                Me.AddPropertySetFieldOptionOperationCompleted = AddressOf Me.OnAddPropertySetFieldOptionOperationCompleted
            End If
            Me.InvokeAsync("AddPropertySetFieldOption", New Object() {AuthenticationTicket, PropertySetName, FieldName, OptionValue}, Me.AddPropertySetFieldOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPropertySetFieldOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPropertySetFieldOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPropertySetFieldOptionCompleted(Me, New AddPropertySetFieldOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePropertySetFieldOption", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePropertySetFieldOption(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeletePropertySetFieldOption", New Object() {AuthenticationTicket, PropertySetName, FieldName, OptionValue})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeletePropertySetFieldOption(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeletePropertySetFieldOption", New Object() {AuthenticationTicket, PropertySetName, FieldName, OptionValue}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeletePropertySetFieldOption(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetFieldOptionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String)
            Me.DeletePropertySetFieldOptionAsync(AuthenticationTicket, PropertySetName, FieldName, OptionValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetFieldOptionAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal OptionValue As String, ByVal userState As Object)
            If (Me.DeletePropertySetFieldOptionOperationCompleted Is Nothing) Then
                Me.DeletePropertySetFieldOptionOperationCompleted = AddressOf Me.OnDeletePropertySetFieldOptionOperationCompleted
            End If
            Me.InvokeAsync("DeletePropertySetFieldOption", New Object() {AuthenticationTicket, PropertySetName, FieldName, OptionValue}, Me.DeletePropertySetFieldOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePropertySetFieldOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePropertySetFieldOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePropertySetFieldOptionCompleted(Me, New DeletePropertySetFieldOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePropertySetField", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePropertySetField(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeletePropertySetField", New Object() {AuthenticationTicket, PropertySetName, FieldName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeletePropertySetField(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeletePropertySetField", New Object() {AuthenticationTicket, PropertySetName, FieldName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeletePropertySetField(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetFieldAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String)
            Me.DeletePropertySetFieldAsync(AuthenticationTicket, PropertySetName, FieldName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetFieldAsync(ByVal AuthenticationTicket As String, ByVal PropertySetName As String, ByVal FieldName As String, ByVal userState As Object)
            If (Me.DeletePropertySetFieldOperationCompleted Is Nothing) Then
                Me.DeletePropertySetFieldOperationCompleted = AddressOf Me.OnDeletePropertySetFieldOperationCompleted
            End If
            Me.InvokeAsync("DeletePropertySetField", New Object() {AuthenticationTicket, PropertySetName, FieldName}, Me.DeletePropertySetFieldOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePropertySetFieldOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePropertySetFieldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePropertySetFieldCompleted(Me, New DeletePropertySetFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MaintenanceBeat", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub MaintenanceBeat()
            Me.Invoke("MaintenanceBeat", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Function BeginMaintenanceBeat(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MaintenanceBeat", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndMaintenanceBeat(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MaintenanceBeatAsync()
            Me.MaintenanceBeatAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MaintenanceBeatAsync(ByVal userState As Object)
            If (Me.MaintenanceBeatOperationCompleted Is Nothing) Then
                Me.MaintenanceBeatOperationCompleted = AddressOf Me.OnMaintenanceBeatOperationCompleted
            End If
            Me.InvokeAsync("MaintenanceBeat", New Object(-1) {}, Me.MaintenanceBeatOperationCompleted, userState)
        End Sub
        
        Private Sub OnMaintenanceBeatOperationCompleted(ByVal arg As Object)
            If (Not (Me.MaintenanceBeatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MaintenanceBeatCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ServerInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ServerInfo() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ServerInfo", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginServerInfo(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ServerInfo", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndServerInfo(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ServerInfoAsync()
            Me.ServerInfoAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ServerInfoAsync(ByVal userState As Object)
            If (Me.ServerInfoOperationCompleted Is Nothing) Then
                Me.ServerInfoOperationCompleted = AddressOf Me.OnServerInfoOperationCompleted
            End If
            Me.InvokeAsync("ServerInfo", New Object(-1) {}, Me.ServerInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnServerInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ServerInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ServerInfoCompleted(Me, New ServerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAddInInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAddInInfo(ByVal AddInName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAddInInfo", New Object() {AddInName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAddInInfo(ByVal AddInName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAddInInfo", New Object() {AddInName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAddInInfo(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAddInInfoAsync(ByVal AddInName As String)
            Me.GetAddInInfoAsync(AddInName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAddInInfoAsync(ByVal AddInName As String, ByVal userState As Object)
            If (Me.GetAddInInfoOperationCompleted Is Nothing) Then
                Me.GetAddInInfoOperationCompleted = AddressOf Me.OnGetAddInInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAddInInfo", New Object() {AddInName}, Me.GetAddInInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAddInInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAddInInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAddInInfoCompleted(Me, New GetAddInInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAddInPart", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAddInPart(ByVal AddInName As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetAddInPart", New Object() {AddInName})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginGetAddInPart(ByVal AddInName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAddInPart", New Object() {AddInName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAddInPart(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAddInPartAsync(ByVal AddInName As String)
            Me.GetAddInPartAsync(AddInName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAddInPartAsync(ByVal AddInName As String, ByVal userState As Object)
            If (Me.GetAddInPartOperationCompleted Is Nothing) Then
                Me.GetAddInPartOperationCompleted = AddressOf Me.OnGetAddInPartOperationCompleted
            End If
            Me.InvokeAsync("GetAddInPart", New Object() {AddInName}, Me.GetAddInPartOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAddInPartOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAddInPartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAddInPartCompleted(Me, New GetAddInPartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogOut", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogOut(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("LogOut", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginLogOut(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LogOut", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLogOut(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogOutAsync(ByVal AuthenticationTicket As String)
            Me.LogOutAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogOutAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.LogOutOperationCompleted Is Nothing) Then
                Me.LogOutOperationCompleted = AddressOf Me.OnLogOutOperationCompleted
            End If
            Me.InvokeAsync("LogOut", New Object() {AuthenticationTicket}, Me.LogOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogOutCompleted(Me, New LogOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateTicketforUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateTicketforUser(ByVal TrustedUserPwd As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateTicketforUser", New Object() {TrustedUserPwd, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateTicketforUser(ByVal TrustedUserPwd As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateTicketforUser", New Object() {TrustedUserPwd, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateTicketforUser(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateTicketforUserAsync(ByVal TrustedUserPwd As String, ByVal UserName As String)
            Me.CreateTicketforUserAsync(TrustedUserPwd, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateTicketforUserAsync(ByVal TrustedUserPwd As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.CreateTicketforUserOperationCompleted Is Nothing) Then
                Me.CreateTicketforUserOperationCompleted = AddressOf Me.OnCreateTicketforUserOperationCompleted
            End If
            Me.InvokeAsync("CreateTicketforUser", New Object() {TrustedUserPwd, UserName}, Me.CreateTicketforUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateTicketforUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateTicketforUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateTicketforUserCompleted(Me, New CreateTicketforUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuthenticateUser(ByVal UID As String, ByVal PWD As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AuthenticateUser", New Object() {UID, PWD})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAuthenticateUser(ByVal UID As String, ByVal PWD As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AuthenticateUser", New Object() {UID, PWD}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAuthenticateUser(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthenticateUserAsync(ByVal UID As String, ByVal PWD As String)
            Me.AuthenticateUserAsync(UID, PWD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthenticateUserAsync(ByVal UID As String, ByVal PWD As String, ByVal userState As Object)
            If (Me.AuthenticateUserOperationCompleted Is Nothing) Then
                Me.AuthenticateUserOperationCompleted = AddressOf Me.OnAuthenticateUserOperationCompleted
            End If
            Me.InvokeAsync("AuthenticateUser", New Object() {UID, PWD}, Me.AuthenticateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthenticateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthenticateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthenticateUserCompleted(Me, New AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateUser1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuthenticateUser1(ByVal UID As String, ByVal PWD As String, ByVal Lang As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AuthenticateUser1", New Object() {UID, PWD, Lang})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAuthenticateUser1(ByVal UID As String, ByVal PWD As String, ByVal Lang As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AuthenticateUser1", New Object() {UID, PWD, Lang}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAuthenticateUser1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthenticateUser1Async(ByVal UID As String, ByVal PWD As String, ByVal Lang As String)
            Me.AuthenticateUser1Async(UID, PWD, Lang, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthenticateUser1Async(ByVal UID As String, ByVal PWD As String, ByVal Lang As String, ByVal userState As Object)
            If (Me.AuthenticateUser1OperationCompleted Is Nothing) Then
                Me.AuthenticateUser1OperationCompleted = AddressOf Me.OnAuthenticateUser1OperationCompleted
            End If
            Me.InvokeAsync("AuthenticateUser1", New Object() {UID, PWD, Lang}, Me.AuthenticateUser1OperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthenticateUser1OperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthenticateUser1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthenticateUser1Completed(Me, New AuthenticateUser1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RenewTicket", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RenewTicket(ByVal UID As String, ByVal PWD As String, ByVal Lang As String, ByVal OldTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RenewTicket", New Object() {UID, PWD, Lang, OldTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRenewTicket(ByVal UID As String, ByVal PWD As String, ByVal Lang As String, ByVal OldTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RenewTicket", New Object() {UID, PWD, Lang, OldTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRenewTicket(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RenewTicketAsync(ByVal UID As String, ByVal PWD As String, ByVal Lang As String, ByVal OldTicket As String)
            Me.RenewTicketAsync(UID, PWD, Lang, OldTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RenewTicketAsync(ByVal UID As String, ByVal PWD As String, ByVal Lang As String, ByVal OldTicket As String, ByVal userState As Object)
            If (Me.RenewTicketOperationCompleted Is Nothing) Then
                Me.RenewTicketOperationCompleted = AddressOf Me.OnRenewTicketOperationCompleted
            End If
            Me.InvokeAsync("RenewTicket", New Object() {UID, PWD, Lang, OldTicket}, Me.RenewTicketOperationCompleted, userState)
        End Sub
        
        Private Sub OnRenewTicketOperationCompleted(ByVal arg As Object)
            If (Not (Me.RenewTicketCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RenewTicketCompleted(Me, New RenewTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isValidTicket", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isValidTicket(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("isValidTicket", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginisValidTicket(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("isValidTicket", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndisValidTicket(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isValidTicketAsync(ByVal AuthenticationTicket As String)
            Me.isValidTicketAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isValidTicketAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.isValidTicketOperationCompleted Is Nothing) Then
                Me.isValidTicketOperationCompleted = AddressOf Me.OnisValidTicketOperationCompleted
            End If
            Me.InvokeAsync("isValidTicket", New Object() {AuthenticationTicket}, Me.isValidTicketOperationCompleted, userState)
        End Sub
        
        Private Sub OnisValidTicketOperationCompleted(ByVal arg As Object)
            If (Not (Me.isValidTicketCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isValidTicketCompleted(Me, New isValidTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserExists", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserExists(ByVal AuthenticationTicket As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UserExists", New Object() {AuthenticationTicket, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUserExists(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UserExists", New Object() {AuthenticationTicket, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUserExists(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserExistsAsync(ByVal AuthenticationTicket As String, ByVal UserName As String)
            Me.UserExistsAsync(AuthenticationTicket, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserExistsAsync(ByVal AuthenticationTicket As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.UserExistsOperationCompleted Is Nothing) Then
                Me.UserExistsOperationCompleted = AddressOf Me.OnUserExistsOperationCompleted
            End If
            Me.InvokeAsync("UserExists", New Object() {AuthenticationTicket, UserName}, Me.UserExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserExistsCompleted(Me, New UserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DocumentAccessAllowed", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentAccessAllowed(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DocumentAccessAllowed", New Object() {AuthenticationTicket, Path, ActionId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDocumentAccessAllowed(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DocumentAccessAllowed", New Object() {AuthenticationTicket, Path, ActionId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDocumentAccessAllowed(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentAccessAllowedAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer)
            Me.DocumentAccessAllowedAsync(AuthenticationTicket, Path, ActionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentAccessAllowedAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer, ByVal userState As Object)
            If (Me.DocumentAccessAllowedOperationCompleted Is Nothing) Then
                Me.DocumentAccessAllowedOperationCompleted = AddressOf Me.OnDocumentAccessAllowedOperationCompleted
            End If
            Me.InvokeAsync("DocumentAccessAllowed", New Object() {AuthenticationTicket, Path, ActionId}, Me.DocumentAccessAllowedOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentAccessAllowedOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentAccessAllowedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentAccessAllowedCompleted(Me, New DocumentAccessAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderAccessAllowed", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FolderAccessAllowed(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("FolderAccessAllowed", New Object() {AuthenticationTicket, Path, ActionId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginFolderAccessAllowed(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FolderAccessAllowed", New Object() {AuthenticationTicket, Path, ActionId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFolderAccessAllowed(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FolderAccessAllowedAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer)
            Me.FolderAccessAllowedAsync(AuthenticationTicket, Path, ActionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FolderAccessAllowedAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ActionId As Integer, ByVal userState As Object)
            If (Me.FolderAccessAllowedOperationCompleted Is Nothing) Then
                Me.FolderAccessAllowedOperationCompleted = AddressOf Me.OnFolderAccessAllowedOperationCompleted
            End If
            Me.InvokeAsync("FolderAccessAllowed", New Object() {AuthenticationTicket, Path, ActionId}, Me.FolderAccessAllowedOperationCompleted, userState)
        End Sub
        
        Private Sub OnFolderAccessAllowedOperationCompleted(ByVal arg As Object)
            If (Not (Me.FolderAccessAllowedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FolderAccessAllowedCompleted(Me, New FolderAccessAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFolder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFolder(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateFolder", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateFolder(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateFolder", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateFolder(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFolderAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.CreateFolderAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFolderAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.CreateFolderOperationCompleted Is Nothing) Then
                Me.CreateFolderOperationCompleted = AddressOf Me.OnCreateFolderOperationCompleted
            End If
            Me.InvokeAsync("CreateFolder", New Object() {AuthenticationTicket, Path}, Me.CreateFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFolderCompleted(Me, New CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFolder1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFolder1(ByVal AuthenticationTicket As String, ByVal ParentFolderPath As String, ByVal NewFolderName As String, ByVal Description As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateFolder1", New Object() {AuthenticationTicket, ParentFolderPath, NewFolderName, Description})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateFolder1(ByVal AuthenticationTicket As String, ByVal ParentFolderPath As String, ByVal NewFolderName As String, ByVal Description As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateFolder1", New Object() {AuthenticationTicket, ParentFolderPath, NewFolderName, Description}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateFolder1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFolder1Async(ByVal AuthenticationTicket As String, ByVal ParentFolderPath As String, ByVal NewFolderName As String, ByVal Description As String)
            Me.CreateFolder1Async(AuthenticationTicket, ParentFolderPath, NewFolderName, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFolder1Async(ByVal AuthenticationTicket As String, ByVal ParentFolderPath As String, ByVal NewFolderName As String, ByVal Description As String, ByVal userState As Object)
            If (Me.CreateFolder1OperationCompleted Is Nothing) Then
                Me.CreateFolder1OperationCompleted = AddressOf Me.OnCreateFolder1OperationCompleted
            End If
            Me.InvokeAsync("CreateFolder1", New Object() {AuthenticationTicket, ParentFolderPath, NewFolderName, Description}, Me.CreateFolder1OperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFolder1OperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFolder1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFolder1Completed(Me, New CreateFolder1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFolder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFolder(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteFolder", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteFolder(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteFolder", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteFolder(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFolderAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.DeleteFolderAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFolderAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.DeleteFolderOperationCompleted Is Nothing) Then
                Me.DeleteFolderOperationCompleted = AddressOf Me.OnDeleteFolderOperationCompleted
            End If
            Me.InvokeAsync("DeleteFolder", New Object() {AuthenticationTicket, Path}, Me.DeleteFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFolderCompleted(Me, New DeleteFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDocument(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteDocument", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteDocument(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteDocument", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteDocument(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.DeleteDocumentAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.DeleteDocumentOperationCompleted Is Nothing) Then
                Me.DeleteDocumentOperationCompleted = AddressOf Me.OnDeleteDocumentOperationCompleted
            End If
            Me.InvokeAsync("DeleteDocument", New Object() {AuthenticationTicket, Path}, Me.DeleteDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDocumentCompleted(Me, New DeleteDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnpublishDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnpublishDocument(ByVal AuthenticationTicket As String, ByVal DocumentPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UnpublishDocument", New Object() {AuthenticationTicket, DocumentPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUnpublishDocument(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UnpublishDocument", New Object() {AuthenticationTicket, DocumentPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUnpublishDocument(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnpublishDocumentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String)
            Me.UnpublishDocumentAsync(AuthenticationTicket, DocumentPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnpublishDocumentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal userState As Object)
            If (Me.UnpublishDocumentOperationCompleted Is Nothing) Then
                Me.UnpublishDocumentOperationCompleted = AddressOf Me.OnUnpublishDocumentOperationCompleted
            End If
            Me.InvokeAsync("UnpublishDocument", New Object() {AuthenticationTicket, DocumentPath}, Me.UnpublishDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnpublishDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnpublishDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnpublishDocumentCompleted(Me, New UnpublishDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PublishDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PublishDocument(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("PublishDocument", New Object() {AuthenticationTicket, DocumentPath, VersionNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginPublishDocument(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PublishDocument", New Object() {AuthenticationTicket, DocumentPath, VersionNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPublishDocument(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PublishDocumentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer)
            Me.PublishDocumentAsync(AuthenticationTicket, DocumentPath, VersionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PublishDocumentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer, ByVal userState As Object)
            If (Me.PublishDocumentOperationCompleted Is Nothing) Then
                Me.PublishDocumentOperationCompleted = AddressOf Me.OnPublishDocumentOperationCompleted
            End If
            Me.InvokeAsync("PublishDocument", New Object() {AuthenticationTicket, DocumentPath, VersionNumber}, Me.PublishDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnPublishDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.PublishDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PublishDocumentCompleted(Me, New PublishDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDocumentVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDocumentVersion(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteDocumentVersion", New Object() {AuthenticationTicket, DocumentPath, VersionNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteDocumentVersion(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteDocumentVersion", New Object() {AuthenticationTicket, DocumentPath, VersionNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteDocumentVersion(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentVersionAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer)
            Me.DeleteDocumentVersionAsync(AuthenticationTicket, DocumentPath, VersionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentVersionAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal VersionNumber As Integer, ByVal userState As Object)
            If (Me.DeleteDocumentVersionOperationCompleted Is Nothing) Then
                Me.DeleteDocumentVersionOperationCompleted = AddressOf Me.OnDeleteDocumentVersionOperationCompleted
            End If
            Me.InvokeAsync("DeleteDocumentVersion", New Object() {AuthenticationTicket, DocumentPath, VersionNumber}, Me.DeleteDocumentVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDocumentVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDocumentVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDocumentVersionCompleted(Me, New DeleteDocumentVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubscribers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubscribers(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetSubscribers", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSubscribers(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSubscribers", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSubscribers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubscribersAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetSubscribersAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubscribersAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetSubscribersOperationCompleted Is Nothing) Then
                Me.GetSubscribersOperationCompleted = AddressOf Me.OnGetSubscribersOperationCompleted
            End If
            Me.InvokeAsync("GetSubscribers", New Object() {AuthenticationTicket, Path}, Me.GetSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubscribersCompleted(Me, New GetSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserToFolderSubscribers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUserToFolderSubscribers(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal UserName As String, ByVal ON_READ As Boolean, ByVal ON_CHANGE As Boolean, ByVal ON_UPDATE As Boolean, ByVal ON_CHECKOUT As Boolean, ByVal ON_APPROVE As Boolean, ByVal ON_REJECT As Boolean, ByVal ON_COMMENT As Boolean, ByVal ON_MOVE As Boolean, ByVal ON_DELETE As Boolean, ByVal ON_CHECKIN As Boolean, ByVal ON_NEWDOC As Boolean, ByVal IncludeSubObjects As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddUserToFolderSubscribers", New Object() {AuthenticationTicket, FolderPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN, ON_NEWDOC, IncludeSubObjects})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddUserToFolderSubscribers( _
                    ByVal AuthenticationTicket As String,  _
                    ByVal FolderPath As String,  _
                    ByVal UserName As String,  _
                    ByVal ON_READ As Boolean,  _
                    ByVal ON_CHANGE As Boolean,  _
                    ByVal ON_UPDATE As Boolean,  _
                    ByVal ON_CHECKOUT As Boolean,  _
                    ByVal ON_APPROVE As Boolean,  _
                    ByVal ON_REJECT As Boolean,  _
                    ByVal ON_COMMENT As Boolean,  _
                    ByVal ON_MOVE As Boolean,  _
                    ByVal ON_DELETE As Boolean,  _
                    ByVal ON_CHECKIN As Boolean,  _
                    ByVal ON_NEWDOC As Boolean,  _
                    ByVal IncludeSubObjects As Boolean,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddUserToFolderSubscribers", New Object() {AuthenticationTicket, FolderPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN, ON_NEWDOC, IncludeSubObjects}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddUserToFolderSubscribers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUserToFolderSubscribersAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal UserName As String, ByVal ON_READ As Boolean, ByVal ON_CHANGE As Boolean, ByVal ON_UPDATE As Boolean, ByVal ON_CHECKOUT As Boolean, ByVal ON_APPROVE As Boolean, ByVal ON_REJECT As Boolean, ByVal ON_COMMENT As Boolean, ByVal ON_MOVE As Boolean, ByVal ON_DELETE As Boolean, ByVal ON_CHECKIN As Boolean, ByVal ON_NEWDOC As Boolean, ByVal IncludeSubObjects As Boolean)
            Me.AddUserToFolderSubscribersAsync(AuthenticationTicket, FolderPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN, ON_NEWDOC, IncludeSubObjects, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserToFolderSubscribersAsync( _
                    ByVal AuthenticationTicket As String,  _
                    ByVal FolderPath As String,  _
                    ByVal UserName As String,  _
                    ByVal ON_READ As Boolean,  _
                    ByVal ON_CHANGE As Boolean,  _
                    ByVal ON_UPDATE As Boolean,  _
                    ByVal ON_CHECKOUT As Boolean,  _
                    ByVal ON_APPROVE As Boolean,  _
                    ByVal ON_REJECT As Boolean,  _
                    ByVal ON_COMMENT As Boolean,  _
                    ByVal ON_MOVE As Boolean,  _
                    ByVal ON_DELETE As Boolean,  _
                    ByVal ON_CHECKIN As Boolean,  _
                    ByVal ON_NEWDOC As Boolean,  _
                    ByVal IncludeSubObjects As Boolean,  _
                    ByVal userState As Object)
            If (Me.AddUserToFolderSubscribersOperationCompleted Is Nothing) Then
                Me.AddUserToFolderSubscribersOperationCompleted = AddressOf Me.OnAddUserToFolderSubscribersOperationCompleted
            End If
            Me.InvokeAsync("AddUserToFolderSubscribers", New Object() {AuthenticationTicket, FolderPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN, ON_NEWDOC, IncludeSubObjects}, Me.AddUserToFolderSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserToFolderSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserToFolderSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserToFolderSubscribersCompleted(Me, New AddUserToFolderSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserToDocumentSubscribers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUserToDocumentSubscribers(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String, ByVal ON_READ As Boolean, ByVal ON_CHANGE As Boolean, ByVal ON_UPDATE As Boolean, ByVal ON_CHECKOUT As Boolean, ByVal ON_APPROVE As Boolean, ByVal ON_REJECT As Boolean, ByVal ON_COMMENT As Boolean, ByVal ON_MOVE As Boolean, ByVal ON_DELETE As Boolean, ByVal ON_CHECKIN As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddUserToDocumentSubscribers", New Object() {AuthenticationTicket, DocumentPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddUserToDocumentSubscribers(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String, ByVal ON_READ As Boolean, ByVal ON_CHANGE As Boolean, ByVal ON_UPDATE As Boolean, ByVal ON_CHECKOUT As Boolean, ByVal ON_APPROVE As Boolean, ByVal ON_REJECT As Boolean, ByVal ON_COMMENT As Boolean, ByVal ON_MOVE As Boolean, ByVal ON_DELETE As Boolean, ByVal ON_CHECKIN As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddUserToDocumentSubscribers", New Object() {AuthenticationTicket, DocumentPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddUserToDocumentSubscribers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUserToDocumentSubscribersAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String, ByVal ON_READ As Boolean, ByVal ON_CHANGE As Boolean, ByVal ON_UPDATE As Boolean, ByVal ON_CHECKOUT As Boolean, ByVal ON_APPROVE As Boolean, ByVal ON_REJECT As Boolean, ByVal ON_COMMENT As Boolean, ByVal ON_MOVE As Boolean, ByVal ON_DELETE As Boolean, ByVal ON_CHECKIN As Boolean)
            Me.AddUserToDocumentSubscribersAsync(AuthenticationTicket, DocumentPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserToDocumentSubscribersAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String, ByVal ON_READ As Boolean, ByVal ON_CHANGE As Boolean, ByVal ON_UPDATE As Boolean, ByVal ON_CHECKOUT As Boolean, ByVal ON_APPROVE As Boolean, ByVal ON_REJECT As Boolean, ByVal ON_COMMENT As Boolean, ByVal ON_MOVE As Boolean, ByVal ON_DELETE As Boolean, ByVal ON_CHECKIN As Boolean, ByVal userState As Object)
            If (Me.AddUserToDocumentSubscribersOperationCompleted Is Nothing) Then
                Me.AddUserToDocumentSubscribersOperationCompleted = AddressOf Me.OnAddUserToDocumentSubscribersOperationCompleted
            End If
            Me.InvokeAsync("AddUserToDocumentSubscribers", New Object() {AuthenticationTicket, DocumentPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN}, Me.AddUserToDocumentSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserToDocumentSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserToDocumentSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserToDocumentSubscribersCompleted(Me, New AddUserToDocumentSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserFromFolderSubscribers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveUserFromFolderSubscribers(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal UserName As String, ByVal IncludeSubObjects As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveUserFromFolderSubscribers", New Object() {AuthenticationTicket, FolderPath, UserName, IncludeSubObjects})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveUserFromFolderSubscribers(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal UserName As String, ByVal IncludeSubObjects As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveUserFromFolderSubscribers", New Object() {AuthenticationTicket, FolderPath, UserName, IncludeSubObjects}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveUserFromFolderSubscribers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromFolderSubscribersAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal UserName As String, ByVal IncludeSubObjects As Boolean)
            Me.RemoveUserFromFolderSubscribersAsync(AuthenticationTicket, FolderPath, UserName, IncludeSubObjects, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromFolderSubscribersAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal UserName As String, ByVal IncludeSubObjects As Boolean, ByVal userState As Object)
            If (Me.RemoveUserFromFolderSubscribersOperationCompleted Is Nothing) Then
                Me.RemoveUserFromFolderSubscribersOperationCompleted = AddressOf Me.OnRemoveUserFromFolderSubscribersOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserFromFolderSubscribers", New Object() {AuthenticationTicket, FolderPath, UserName, IncludeSubObjects}, Me.RemoveUserFromFolderSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserFromFolderSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserFromFolderSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserFromFolderSubscribersCompleted(Me, New RemoveUserFromFolderSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserFromDocumentSubscribers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveUserFromDocumentSubscribers(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveUserFromDocumentSubscribers", New Object() {AuthenticationTicket, DocumentPath, UserName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveUserFromDocumentSubscribers(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveUserFromDocumentSubscribers", New Object() {AuthenticationTicket, DocumentPath, UserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveUserFromDocumentSubscribers(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromDocumentSubscribersAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String)
            Me.RemoveUserFromDocumentSubscribersAsync(AuthenticationTicket, DocumentPath, UserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveUserFromDocumentSubscribersAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal UserName As String, ByVal userState As Object)
            If (Me.RemoveUserFromDocumentSubscribersOperationCompleted Is Nothing) Then
                Me.RemoveUserFromDocumentSubscribersOperationCompleted = AddressOf Me.OnRemoveUserFromDocumentSubscribersOperationCompleted
            End If
            Me.InvokeAsync("RemoveUserFromDocumentSubscribers", New Object() {AuthenticationTicket, DocumentPath, UserName}, Me.RemoveUserFromDocumentSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveUserFromDocumentSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveUserFromDocumentSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveUserFromDocumentSubscribersCompleted(Me, New RemoveUserFromDocumentSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderExists", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FolderExists(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("FolderExists", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginFolderExists(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FolderExists", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFolderExists(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FolderExistsAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.FolderExistsAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FolderExistsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.FolderExistsOperationCompleted Is Nothing) Then
                Me.FolderExistsOperationCompleted = AddressOf Me.OnFolderExistsOperationCompleted
            End If
            Me.InvokeAsync("FolderExists", New Object() {AuthenticationTicket, Path}, Me.FolderExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFolderExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FolderExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FolderExistsCompleted(Me, New FolderExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FolderExists1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FolderExists1(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal FolderName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("FolderExists1", New Object() {AuthenticationTicket, FolderPath, FolderName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginFolderExists1(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal FolderName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FolderExists1", New Object() {AuthenticationTicket, FolderPath, FolderName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFolderExists1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FolderExists1Async(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal FolderName As String)
            Me.FolderExists1Async(AuthenticationTicket, FolderPath, FolderName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FolderExists1Async(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal FolderName As String, ByVal userState As Object)
            If (Me.FolderExists1OperationCompleted Is Nothing) Then
                Me.FolderExists1OperationCompleted = AddressOf Me.OnFolderExists1OperationCompleted
            End If
            Me.InvokeAsync("FolderExists1", New Object() {AuthenticationTicket, FolderPath, FolderName}, Me.FolderExists1OperationCompleted, userState)
        End Sub
        
        Private Sub OnFolderExists1OperationCompleted(ByVal arg As Object)
            If (Not (Me.FolderExists1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FolderExists1Completed(Me, New FolderExists1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubFoldersCount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubFoldersCount(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetSubFoldersCount", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSubFoldersCount(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSubFoldersCount", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSubFoldersCount(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubFoldersCountAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetSubFoldersCountAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubFoldersCountAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetSubFoldersCountOperationCompleted Is Nothing) Then
                Me.GetSubFoldersCountOperationCompleted = AddressOf Me.OnGetSubFoldersCountOperationCompleted
            End If
            Me.InvokeAsync("GetSubFoldersCount", New Object() {AuthenticationTicket, Path}, Me.GetSubFoldersCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubFoldersCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubFoldersCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubFoldersCountCompleted(Me, New GetSubFoldersCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetParentFolderIDs", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetParentFolderIDs(ByVal AuthenticationTicket As String, ByVal FolderID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetParentFolderIDs", New Object() {AuthenticationTicket, FolderID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetParentFolderIDs(ByVal AuthenticationTicket As String, ByVal FolderID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetParentFolderIDs", New Object() {AuthenticationTicket, FolderID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetParentFolderIDs(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetParentFolderIDsAsync(ByVal AuthenticationTicket As String, ByVal FolderID As Integer)
            Me.GetParentFolderIDsAsync(AuthenticationTicket, FolderID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetParentFolderIDsAsync(ByVal AuthenticationTicket As String, ByVal FolderID As Integer, ByVal userState As Object)
            If (Me.GetParentFolderIDsOperationCompleted Is Nothing) Then
                Me.GetParentFolderIDsOperationCompleted = AddressOf Me.OnGetParentFolderIDsOperationCompleted
            End If
            Me.InvokeAsync("GetParentFolderIDs", New Object() {AuthenticationTicket, FolderID}, Me.GetParentFolderIDsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetParentFolderIDsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetParentFolderIDsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetParentFolderIDsCompleted(Me, New GetParentFolderIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolder(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolder", New Object() {AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolder(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolder", New Object() {AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolder(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolderAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean)
            Me.GetFolderAsync(AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolderAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal userState As Object)
            If (Me.GetFolderOperationCompleted Is Nothing) Then
                Me.GetFolderOperationCompleted = AddressOf Me.OnGetFolderOperationCompleted
            End If
            Me.InvokeAsync("GetFolder", New Object() {AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner}, Me.GetFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolderCompleted(Me, New GetFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocument(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocument", New Object() {AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocument(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocument", New Object() {AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocument(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetDocumentAsync(AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetDocumentOperationCompleted Is Nothing) Then
                Me.GetDocumentOperationCompleted = AddressOf Me.OnGetDocumentOperationCompleted
            End If
            Me.InvokeAsync("GetDocument", New Object() {AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions}, Me.GetDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentCompleted(Me, New GetDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentVersions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentVersions(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentVersions", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentVersions(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentVersions", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentVersions(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentVersionsAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDocumentVersionsAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentVersionsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDocumentVersionsOperationCompleted Is Nothing) Then
                Me.GetDocumentVersionsOperationCompleted = AddressOf Me.OnGetDocumentVersionsOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentVersions", New Object() {AuthenticationTicket, Path}, Me.GetDocumentVersionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentVersionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentVersionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentVersionsCompleted(Me, New GetDocumentVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentAbstract", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentAbstract(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentAbstract", New Object() {AuthenticationTicket, Path, VersionNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentAbstract(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentAbstract", New Object() {AuthenticationTicket, Path, VersionNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentAbstract(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentAbstractAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer)
            Me.GetDocumentAbstractAsync(AuthenticationTicket, Path, VersionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentAbstractAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal userState As Object)
            If (Me.GetDocumentAbstractOperationCompleted Is Nothing) Then
                Me.GetDocumentAbstractOperationCompleted = AddressOf Me.OnGetDocumentAbstractOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentAbstract", New Object() {AuthenticationTicket, Path, VersionNumber}, Me.GetDocumentAbstractOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentAbstractOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentAbstractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentAbstractCompleted(Me, New GetDocumentAbstractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentTextOnlyContent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentTextOnlyContent", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentTextOnlyContent", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentTextOnlyContent(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDocumentTextOnlyContentAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDocumentTextOnlyContentOperationCompleted Is Nothing) Then
                Me.GetDocumentTextOnlyContentOperationCompleted = AddressOf Me.OnGetDocumentTextOnlyContentOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentTextOnlyContent", New Object() {AuthenticationTicket, Path}, Me.GetDocumentTextOnlyContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentTextOnlyContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentTextOnlyContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentTextOnlyContentCompleted(Me, New GetDocumentTextOnlyContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersionTextOnlyContent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVersionTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetVersionTextOnlyContent", New Object() {AuthenticationTicket, Path, VersionNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetVersionTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetVersionTextOnlyContent", New Object() {AuthenticationTicket, Path, VersionNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetVersionTextOnlyContent(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVersionTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer)
            Me.GetVersionTextOnlyContentAsync(AuthenticationTicket, Path, VersionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVersionTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal userState As Object)
            If (Me.GetVersionTextOnlyContentOperationCompleted Is Nothing) Then
                Me.GetVersionTextOnlyContentOperationCompleted = AddressOf Me.OnGetVersionTextOnlyContentOperationCompleted
            End If
            Me.InvokeAsync("GetVersionTextOnlyContent", New Object() {AuthenticationTicket, Path, VersionNumber}, Me.GetVersionTextOnlyContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVersionTextOnlyContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVersionTextOnlyContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVersionTextOnlyContentCompleted(Me, New GetVersionTextOnlyContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDocumentTextOnlyContent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetDocumentTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ContentText As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetDocumentTextOnlyContent", New Object() {AuthenticationTicket, Path, ContentText})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetDocumentTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ContentText As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetDocumentTextOnlyContent", New Object() {AuthenticationTicket, Path, ContentText}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetDocumentTextOnlyContent(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetDocumentTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ContentText As String)
            Me.SetDocumentTextOnlyContentAsync(AuthenticationTicket, Path, ContentText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetDocumentTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal ContentText As String, ByVal userState As Object)
            If (Me.SetDocumentTextOnlyContentOperationCompleted Is Nothing) Then
                Me.SetDocumentTextOnlyContentOperationCompleted = AddressOf Me.OnSetDocumentTextOnlyContentOperationCompleted
            End If
            Me.InvokeAsync("SetDocumentTextOnlyContent", New Object() {AuthenticationTicket, Path, ContentText}, Me.SetDocumentTextOnlyContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetDocumentTextOnlyContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetDocumentTextOnlyContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetDocumentTextOnlyContentCompleted(Me, New SetDocumentTextOnlyContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetVersionTextOnlyContent", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetVersionTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal ContentText As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetVersionTextOnlyContent", New Object() {AuthenticationTicket, Path, VersionNumber, ContentText})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetVersionTextOnlyContent(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal ContentText As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetVersionTextOnlyContent", New Object() {AuthenticationTicket, Path, VersionNumber, ContentText}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetVersionTextOnlyContent(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetVersionTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal ContentText As String)
            Me.SetVersionTextOnlyContentAsync(AuthenticationTicket, Path, VersionNumber, ContentText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetVersionTextOnlyContentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal ContentText As String, ByVal userState As Object)
            If (Me.SetVersionTextOnlyContentOperationCompleted Is Nothing) Then
                Me.SetVersionTextOnlyContentOperationCompleted = AddressOf Me.OnSetVersionTextOnlyContentOperationCompleted
            End If
            Me.InvokeAsync("SetVersionTextOnlyContent", New Object() {AuthenticationTicket, Path, VersionNumber, ContentText}, Me.SetVersionTextOnlyContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetVersionTextOnlyContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetVersionTextOnlyContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetVersionTextOnlyContentCompleted(Me, New SetVersionTextOnlyContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentComments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentComments(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentComments", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentComments(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentComments", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentComments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentCommentsAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDocumentCommentsAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentCommentsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDocumentCommentsOperationCompleted Is Nothing) Then
                Me.GetDocumentCommentsOperationCompleted = AddressOf Me.OnGetDocumentCommentsOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentComments", New Object() {AuthenticationTicket, Path}, Me.GetDocumentCommentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentCommentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentCommentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentCommentsCompleted(Me, New GetDocumentCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssociationTypes", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssociationTypes(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AssociationTypes", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAssociationTypes(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AssociationTypes", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAssociationTypes(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssociationTypesAsync(ByVal AuthenticationTicket As String)
            Me.AssociationTypesAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssociationTypesAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.AssociationTypesOperationCompleted Is Nothing) Then
                Me.AssociationTypesOperationCompleted = AddressOf Me.OnAssociationTypesOperationCompleted
            End If
            Me.InvokeAsync("AssociationTypes", New Object() {AuthenticationTicket}, Me.AssociationTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssociationTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssociationTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssociationTypesCompleted(Me, New AssociationTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssociateDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssociateDocument(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AssociateDocument", New Object() {AuthenticationTicket, DocumentPath, AssociateWith_ItemPath, AssociationTypeID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAssociateDocument(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AssociateDocument", New Object() {AuthenticationTicket, DocumentPath, AssociateWith_ItemPath, AssociationTypeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAssociateDocument(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssociateDocumentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer)
            Me.AssociateDocumentAsync(AuthenticationTicket, DocumentPath, AssociateWith_ItemPath, AssociationTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssociateDocumentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer, ByVal userState As Object)
            If (Me.AssociateDocumentOperationCompleted Is Nothing) Then
                Me.AssociateDocumentOperationCompleted = AddressOf Me.OnAssociateDocumentOperationCompleted
            End If
            Me.InvokeAsync("AssociateDocument", New Object() {AuthenticationTicket, DocumentPath, AssociateWith_ItemPath, AssociationTypeID}, Me.AssociateDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssociateDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssociateDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssociateDocumentCompleted(Me, New AssociateDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssociateFolder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssociateFolder(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AssociateFolder", New Object() {AuthenticationTicket, FolderPath, AssociateWith_ItemPath, AssociationTypeID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAssociateFolder(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AssociateFolder", New Object() {AuthenticationTicket, FolderPath, AssociateWith_ItemPath, AssociationTypeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAssociateFolder(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssociateFolderAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer)
            Me.AssociateFolderAsync(AuthenticationTicket, FolderPath, AssociateWith_ItemPath, AssociationTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssociateFolderAsync(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal AssociateWith_ItemPath As String, ByVal AssociationTypeID As Integer, ByVal userState As Object)
            If (Me.AssociateFolderOperationCompleted Is Nothing) Then
                Me.AssociateFolderOperationCompleted = AddressOf Me.OnAssociateFolderOperationCompleted
            End If
            Me.InvokeAsync("AssociateFolder", New Object() {AuthenticationTicket, FolderPath, AssociateWith_ItemPath, AssociationTypeID}, Me.AssociateFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssociateFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssociateFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssociateFolderCompleted(Me, New AssociateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveAssociation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RemoveAssociation(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal AssociationWith_ItemPath As String, ByVal IsReverseAssociation As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("RemoveAssociation", New Object() {AuthenticationTicket, ItemPath, AssociationWith_ItemPath, IsReverseAssociation})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginRemoveAssociation(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal AssociationWith_ItemPath As String, ByVal IsReverseAssociation As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RemoveAssociation", New Object() {AuthenticationTicket, ItemPath, AssociationWith_ItemPath, IsReverseAssociation}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRemoveAssociation(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RemoveAssociationAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal AssociationWith_ItemPath As String, ByVal IsReverseAssociation As Boolean)
            Me.RemoveAssociationAsync(AuthenticationTicket, ItemPath, AssociationWith_ItemPath, IsReverseAssociation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveAssociationAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal AssociationWith_ItemPath As String, ByVal IsReverseAssociation As Boolean, ByVal userState As Object)
            If (Me.RemoveAssociationOperationCompleted Is Nothing) Then
                Me.RemoveAssociationOperationCompleted = AddressOf Me.OnRemoveAssociationOperationCompleted
            End If
            Me.InvokeAsync("RemoveAssociation", New Object() {AuthenticationTicket, ItemPath, AssociationWith_ItemPath, IsReverseAssociation}, Me.RemoveAssociationOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveAssociationOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveAssociationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveAssociationCompleted(Me, New RemoveAssociationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssociatedDocuments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssociatedDocuments(ByVal AuthenticationTicket As String, ByVal ItemPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AssociatedDocuments", New Object() {AuthenticationTicket, ItemPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAssociatedDocuments(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AssociatedDocuments", New Object() {AuthenticationTicket, ItemPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAssociatedDocuments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssociatedDocumentsAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String)
            Me.AssociatedDocumentsAsync(AuthenticationTicket, ItemPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssociatedDocumentsAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal userState As Object)
            If (Me.AssociatedDocumentsOperationCompleted Is Nothing) Then
                Me.AssociatedDocumentsOperationCompleted = AddressOf Me.OnAssociatedDocumentsOperationCompleted
            End If
            Me.InvokeAsync("AssociatedDocuments", New Object() {AuthenticationTicket, ItemPath}, Me.AssociatedDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssociatedDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssociatedDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssociatedDocumentsCompleted(Me, New AssociatedDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssociatedFolders", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssociatedFolders(ByVal AuthenticationTicket As String, ByVal ItemPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AssociatedFolders", New Object() {AuthenticationTicket, ItemPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAssociatedFolders(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AssociatedFolders", New Object() {AuthenticationTicket, ItemPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAssociatedFolders(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssociatedFoldersAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String)
            Me.AssociatedFoldersAsync(AuthenticationTicket, ItemPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssociatedFoldersAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal userState As Object)
            If (Me.AssociatedFoldersOperationCompleted Is Nothing) Then
                Me.AssociatedFoldersOperationCompleted = AddressOf Me.OnAssociatedFoldersOperationCompleted
            End If
            Me.InvokeAsync("AssociatedFolders", New Object() {AuthenticationTicket, ItemPath}, Me.AssociatedFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssociatedFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssociatedFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssociatedFoldersCompleted(Me, New AssociatedFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssociatedFoldersAndDocuments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssociatedFoldersAndDocuments(ByVal AuthenticationTicket As String, ByVal ItemPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AssociatedFoldersAndDocuments", New Object() {AuthenticationTicket, ItemPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAssociatedFoldersAndDocuments(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AssociatedFoldersAndDocuments", New Object() {AuthenticationTicket, ItemPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAssociatedFoldersAndDocuments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssociatedFoldersAndDocumentsAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String)
            Me.AssociatedFoldersAndDocumentsAsync(AuthenticationTicket, ItemPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssociatedFoldersAndDocumentsAsync(ByVal AuthenticationTicket As String, ByVal ItemPath As String, ByVal userState As Object)
            If (Me.AssociatedFoldersAndDocumentsOperationCompleted Is Nothing) Then
                Me.AssociatedFoldersAndDocumentsOperationCompleted = AddressOf Me.OnAssociatedFoldersAndDocumentsOperationCompleted
            End If
            Me.InvokeAsync("AssociatedFoldersAndDocuments", New Object() {AuthenticationTicket, ItemPath}, Me.AssociatedFoldersAndDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssociatedFoldersAndDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssociatedFoldersAndDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssociatedFoldersAndDocumentsCompleted(Me, New AssociatedFoldersAndDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getTasks", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTasks(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getTasks", New Object() {AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegingetTasks(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getTasks", New Object() {AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetTasks(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTasksAsync(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean)
            Me.getTasksAsync(AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTasksAsync(ByVal AuthenticationTicket As String, ByVal xmlcriteria As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean, ByVal userState As Object)
            If (Me.getTasksOperationCompleted Is Nothing) Then
                Me.getTasksOperationCompleted = AddressOf Me.OngetTasksOperationCompleted
            End If
            Me.InvokeAsync("getTasks", New Object() {AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder}, Me.getTasksOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTasksOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTasksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTasksCompleted(Me, New getTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDueTaskDocuments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDueTaskDocuments(ByVal AuthenticationTicket As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDueTaskDocuments", New Object() {AuthenticationTicket})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDueTaskDocuments(ByVal AuthenticationTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDueTaskDocuments", New Object() {AuthenticationTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDueTaskDocuments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDueTaskDocumentsAsync(ByVal AuthenticationTicket As String)
            Me.GetDueTaskDocumentsAsync(AuthenticationTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDueTaskDocumentsAsync(ByVal AuthenticationTicket As String, ByVal userState As Object)
            If (Me.GetDueTaskDocumentsOperationCompleted Is Nothing) Then
                Me.GetDueTaskDocumentsOperationCompleted = AddressOf Me.OnGetDueTaskDocumentsOperationCompleted
            End If
            Me.InvokeAsync("GetDueTaskDocuments", New Object() {AuthenticationTicket}, Me.GetDueTaskDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDueTaskDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDueTaskDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDueTaskDocumentsCompleted(Me, New GetDueTaskDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddDocumentComment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddDocumentComment(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentText As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddDocumentComment", New Object() {AuthenticationTicket, DocumentPath, CommentText})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddDocumentComment(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentText As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddDocumentComment", New Object() {AuthenticationTicket, DocumentPath, CommentText}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddDocumentComment(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddDocumentCommentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentText As String)
            Me.AddDocumentCommentAsync(AuthenticationTicket, DocumentPath, CommentText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddDocumentCommentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentText As String, ByVal userState As Object)
            If (Me.AddDocumentCommentOperationCompleted Is Nothing) Then
                Me.AddDocumentCommentOperationCompleted = AddressOf Me.OnAddDocumentCommentOperationCompleted
            End If
            Me.InvokeAsync("AddDocumentComment", New Object() {AuthenticationTicket, DocumentPath, CommentText}, Me.AddDocumentCommentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddDocumentCommentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddDocumentCommentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddDocumentCommentCompleted(Me, New AddDocumentCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDocumentComment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDocumentComment(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentAuthorID As Integer, ByVal CommentDate As Date) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteDocumentComment", New Object() {AuthenticationTicket, DocumentPath, CommentAuthorID, CommentDate})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteDocumentComment(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentAuthorID As Integer, ByVal CommentDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteDocumentComment", New Object() {AuthenticationTicket, DocumentPath, CommentAuthorID, CommentDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteDocumentComment(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentCommentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentAuthorID As Integer, ByVal CommentDate As Date)
            Me.DeleteDocumentCommentAsync(AuthenticationTicket, DocumentPath, CommentAuthorID, CommentDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDocumentCommentAsync(ByVal AuthenticationTicket As String, ByVal DocumentPath As String, ByVal CommentAuthorID As Integer, ByVal CommentDate As Date, ByVal userState As Object)
            If (Me.DeleteDocumentCommentOperationCompleted Is Nothing) Then
                Me.DeleteDocumentCommentOperationCompleted = AddressOf Me.OnDeleteDocumentCommentOperationCompleted
            End If
            Me.InvokeAsync("DeleteDocumentComment", New Object() {AuthenticationTicket, DocumentPath, CommentAuthorID, CommentDate}, Me.DeleteDocumentCommentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDocumentCommentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDocumentCommentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDocumentCommentCompleted(Me, New DeleteDocumentCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentViewLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentViewLog(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentViewLog", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentViewLog(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentViewLog", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentViewLog(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentViewLogAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDocumentViewLogAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentViewLogAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDocumentViewLogOperationCompleted Is Nothing) Then
                Me.GetDocumentViewLogOperationCompleted = AddressOf Me.OnGetDocumentViewLogOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentViewLog", New Object() {AuthenticationTicket, Path}, Me.GetDocumentViewLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentViewLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentViewLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentViewLogCompleted(Me, New GetDocumentViewLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentReadLogHistory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentReadLogHistory(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UserID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentReadLogHistory", New Object() {AuthenticationTicket, Path, UserID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentReadLogHistory(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UserID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentReadLogHistory", New Object() {AuthenticationTicket, Path, UserID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentReadLogHistory(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentReadLogHistoryAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UserID As Integer)
            Me.GetDocumentReadLogHistoryAsync(AuthenticationTicket, Path, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentReadLogHistoryAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.GetDocumentReadLogHistoryOperationCompleted Is Nothing) Then
                Me.GetDocumentReadLogHistoryOperationCompleted = AddressOf Me.OnGetDocumentReadLogHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentReadLogHistory", New Object() {AuthenticationTicket, Path, UserID}, Me.GetDocumentReadLogHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentReadLogHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentReadLogHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentReadLogHistoryCompleted(Me, New GetDocumentReadLogHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentKeywords", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentKeywords(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentKeywords", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentKeywords(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentKeywords", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentKeywords(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentKeywordsAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDocumentKeywordsAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentKeywordsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDocumentKeywordsOperationCompleted Is Nothing) Then
                Me.GetDocumentKeywordsOperationCompleted = AddressOf Me.OnGetDocumentKeywordsOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentKeywords", New Object() {AuthenticationTicket, Path}, Me.GetDocumentKeywordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentKeywordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentKeywordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentKeywordsCompleted(Me, New GetDocumentKeywordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPropertySets", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertySets(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPropertySets", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPropertySets(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPropertySets", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPropertySets(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetsAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetPropertySetsAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertySetsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetPropertySetsOperationCompleted Is Nothing) Then
                Me.GetPropertySetsOperationCompleted = AddressOf Me.OnGetPropertySetsOperationCompleted
            End If
            Me.InvokeAsync("GetPropertySets", New Object() {AuthenticationTicket, Path}, Me.GetPropertySetsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertySetsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertySetsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertySetsCompleted(Me, New GetPropertySetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPropertySetRow", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPropertySetRow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("AddPropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginAddPropertySetRow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddPropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddPropertySetRow(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPropertySetRowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String)
            Me.AddPropertySetRowAsync(AuthenticationTicket, Path, xmlpset, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPropertySetRowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String, ByVal userState As Object)
            If (Me.AddPropertySetRowOperationCompleted Is Nothing) Then
                Me.AddPropertySetRowOperationCompleted = AddressOf Me.OnAddPropertySetRowOperationCompleted
            End If
            Me.InvokeAsync("AddPropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset}, Me.AddPropertySetRowOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPropertySetRowOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPropertySetRowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPropertySetRowCompleted(Me, New AddPropertySetRowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePropertySetRow", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePropertySetRow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdatePropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdatePropertySetRow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdatePropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdatePropertySetRow(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePropertySetRowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String)
            Me.UpdatePropertySetRowAsync(AuthenticationTicket, Path, xmlpset, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePropertySetRowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String, ByVal userState As Object)
            If (Me.UpdatePropertySetRowOperationCompleted Is Nothing) Then
                Me.UpdatePropertySetRowOperationCompleted = AddressOf Me.OnUpdatePropertySetRowOperationCompleted
            End If
            Me.InvokeAsync("UpdatePropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset}, Me.UpdatePropertySetRowOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePropertySetRowOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePropertySetRowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePropertySetRowCompleted(Me, New UpdatePropertySetRowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePropertySetRow", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePropertySetRow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeletePropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeletePropertySetRow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeletePropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeletePropertySetRow(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetRowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String)
            Me.DeletePropertySetRowAsync(AuthenticationTicket, Path, xmlpset, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePropertySetRowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlpset As String, ByVal userState As Object)
            If (Me.DeletePropertySetRowOperationCompleted Is Nothing) Then
                Me.DeletePropertySetRowOperationCompleted = AddressOf Me.OnDeletePropertySetRowOperationCompleted
            End If
            Me.InvokeAsync("DeletePropertySetRow", New Object() {AuthenticationTicket, Path, xmlpset}, Me.DeletePropertySetRowOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePropertySetRowOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePropertySetRowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePropertySetRowCompleted(Me, New DeletePropertySetRowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOwner", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOwner(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetOwner", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOwner(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOwner", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOwner(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOwnerAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetOwnerAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOwnerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetOwnerOperationCompleted Is Nothing) Then
                Me.GetOwnerOperationCompleted = AddressOf Me.OnGetOwnerOperationCompleted
            End If
            Me.InvokeAsync("GetOwner", New Object() {AuthenticationTicket, Path}, Me.GetOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOwnerCompleted(Me, New GetOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetOwner", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetOwner(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewOwnerUserName As String, ByVal ApplytoTree As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetOwner", New Object() {AuthenticationTicket, Path, NewOwnerUserName, ApplytoTree})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetOwner(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewOwnerUserName As String, ByVal ApplytoTree As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetOwner", New Object() {AuthenticationTicket, Path, NewOwnerUserName, ApplytoTree}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetOwner(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetOwnerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewOwnerUserName As String, ByVal ApplytoTree As Boolean)
            Me.SetOwnerAsync(AuthenticationTicket, Path, NewOwnerUserName, ApplytoTree, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetOwnerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewOwnerUserName As String, ByVal ApplytoTree As Boolean, ByVal userState As Object)
            If (Me.SetOwnerOperationCompleted Is Nothing) Then
                Me.SetOwnerOperationCompleted = AddressOf Me.OnSetOwnerOperationCompleted
            End If
            Me.InvokeAsync("SetOwner", New Object() {AuthenticationTicket, Path, NewOwnerUserName, ApplytoTree}, Me.SetOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetOwnerCompleted(Me, New SetOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderRules", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolderRules(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolderRules", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolderRules(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolderRules", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolderRules(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolderRulesAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetFolderRulesAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolderRulesAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetFolderRulesOperationCompleted Is Nothing) Then
                Me.GetFolderRulesOperationCompleted = AddressOf Me.OnGetFolderRulesOperationCompleted
            End If
            Me.InvokeAsync("GetFolderRules", New Object() {AuthenticationTicket, Path}, Me.GetFolderRulesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolderRulesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolderRulesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolderRulesCompleted(Me, New GetFolderRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetFolderRules", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetFolderRules(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlRules As System.Xml.XmlNode, ByVal ApplyToTree As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetFolderRules", New Object() {AuthenticationTicket, Path, xmlRules, ApplyToTree})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetFolderRules(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlRules As System.Xml.XmlNode, ByVal ApplyToTree As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetFolderRules", New Object() {AuthenticationTicket, Path, xmlRules, ApplyToTree}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetFolderRules(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetFolderRulesAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlRules As System.Xml.XmlNode, ByVal ApplyToTree As Boolean)
            Me.SetFolderRulesAsync(AuthenticationTicket, Path, xmlRules, ApplyToTree, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetFolderRulesAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal xmlRules As System.Xml.XmlNode, ByVal ApplyToTree As Boolean, ByVal userState As Object)
            If (Me.SetFolderRulesOperationCompleted Is Nothing) Then
                Me.SetFolderRulesOperationCompleted = AddressOf Me.OnSetFolderRulesOperationCompleted
            End If
            Me.InvokeAsync("SetFolderRules", New Object() {AuthenticationTicket, Path, xmlRules, ApplyToTree}, Me.SetFolderRulesOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetFolderRulesOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetFolderRulesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetFolderRulesCompleted(Me, New SetFolderRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFolderProperties", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFolderProperties(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewFolderName As String, ByVal NewDescription As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateFolderProperties", New Object() {AuthenticationTicket, Path, NewFolderName, NewDescription})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateFolderProperties(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewFolderName As String, ByVal NewDescription As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateFolderProperties", New Object() {AuthenticationTicket, Path, NewFolderName, NewDescription}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateFolderProperties(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFolderPropertiesAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewFolderName As String, ByVal NewDescription As String)
            Me.UpdateFolderPropertiesAsync(AuthenticationTicket, Path, NewFolderName, NewDescription, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFolderPropertiesAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewFolderName As String, ByVal NewDescription As String, ByVal userState As Object)
            If (Me.UpdateFolderPropertiesOperationCompleted Is Nothing) Then
                Me.UpdateFolderPropertiesOperationCompleted = AddressOf Me.OnUpdateFolderPropertiesOperationCompleted
            End If
            Me.InvokeAsync("UpdateFolderProperties", New Object() {AuthenticationTicket, Path, NewFolderName, NewDescription}, Me.UpdateFolderPropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFolderPropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFolderPropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFolderPropertiesCompleted(Me, New UpdateFolderPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDocumentProperties", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDocumentProperties(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateDocumentProperties", New Object() {AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDocumentProperties(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDocumentProperties", New Object() {AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDocumentProperties(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentPropertiesAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String)
            Me.UpdateDocumentPropertiesAsync(AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentPropertiesAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String, ByVal userState As Object)
            If (Me.UpdateDocumentPropertiesOperationCompleted Is Nothing) Then
                Me.UpdateDocumentPropertiesOperationCompleted = AddressOf Me.OnUpdateDocumentPropertiesOperationCompleted
            End If
            Me.InvokeAsync("UpdateDocumentProperties", New Object() {AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions}, Me.UpdateDocumentPropertiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDocumentPropertiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDocumentPropertiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDocumentPropertiesCompleted(Me, New UpdateDocumentPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDocumentProperties1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDocumentProperties1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String, ByVal NewDocumentSource As String, ByVal NewDocumentLanguage As String, ByVal NewDocumentAuthor As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateDocumentProperties1", New Object() {AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions, NewDocumentSource, NewDocumentLanguage, NewDocumentAuthor})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDocumentProperties1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String, ByVal NewDocumentSource As String, ByVal NewDocumentLanguage As String, ByVal NewDocumentAuthor As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDocumentProperties1", New Object() {AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions, NewDocumentSource, NewDocumentLanguage, NewDocumentAuthor}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDocumentProperties1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentProperties1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String, ByVal NewDocumentSource As String, ByVal NewDocumentLanguage As String, ByVal NewDocumentAuthor As String)
            Me.UpdateDocumentProperties1Async(AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions, NewDocumentSource, NewDocumentLanguage, NewDocumentAuthor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentProperties1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal NewDocumentName As String, ByVal NewDescription As String, ByVal NewUpdateInstructions As String, ByVal NewDocumentSource As String, ByVal NewDocumentLanguage As String, ByVal NewDocumentAuthor As String, ByVal userState As Object)
            If (Me.UpdateDocumentProperties1OperationCompleted Is Nothing) Then
                Me.UpdateDocumentProperties1OperationCompleted = AddressOf Me.OnUpdateDocumentProperties1OperationCompleted
            End If
            Me.InvokeAsync("UpdateDocumentProperties1", New Object() {AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions, NewDocumentSource, NewDocumentLanguage, NewDocumentAuthor}, Me.UpdateDocumentProperties1OperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDocumentProperties1OperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDocumentProperties1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDocumentProperties1Completed(Me, New UpdateDocumentProperties1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDocumentType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDocumentType(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentTypeID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateDocumentType", New Object() {AuthenticationTicket, Path, DocumentTypeID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDocumentType(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentTypeID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDocumentType", New Object() {AuthenticationTicket, Path, DocumentTypeID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDocumentType(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentTypeAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentTypeID As Integer)
            Me.UpdateDocumentTypeAsync(AuthenticationTicket, Path, DocumentTypeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentTypeAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentTypeID As Integer, ByVal userState As Object)
            If (Me.UpdateDocumentTypeOperationCompleted Is Nothing) Then
                Me.UpdateDocumentTypeOperationCompleted = AddressOf Me.OnUpdateDocumentTypeOperationCompleted
            End If
            Me.InvokeAsync("UpdateDocumentType", New Object() {AuthenticationTicket, Path, DocumentTypeID}, Me.UpdateDocumentTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDocumentTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDocumentTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDocumentTypeCompleted(Me, New UpdateDocumentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitDocumentToFlow", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitDocumentToFlow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SubmitDocumentToFlow", New Object() {AuthenticationTicket, Path, FlowDefID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSubmitDocumentToFlow(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SubmitDocumentToFlow", New Object() {AuthenticationTicket, Path, FlowDefID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSubmitDocumentToFlow(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitDocumentToFlowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String)
            Me.SubmitDocumentToFlowAsync(AuthenticationTicket, Path, FlowDefID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitDocumentToFlowAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String, ByVal userState As Object)
            If (Me.SubmitDocumentToFlowOperationCompleted Is Nothing) Then
                Me.SubmitDocumentToFlowOperationCompleted = AddressOf Me.OnSubmitDocumentToFlowOperationCompleted
            End If
            Me.InvokeAsync("SubmitDocumentToFlow", New Object() {AuthenticationTicket, Path, FlowDefID}, Me.SubmitDocumentToFlowOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitDocumentToFlowOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitDocumentToFlowCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitDocumentToFlowCompleted(Me, New SubmitDocumentToFlowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitDocumentToFlow1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitDocumentToFlow1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String, ByVal StepPlayerIDs As String, ByVal StepGroupIDs As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SubmitDocumentToFlow1", New Object() {AuthenticationTicket, Path, FlowDefID, StepPlayerIDs, StepGroupIDs})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSubmitDocumentToFlow1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String, ByVal StepPlayerIDs As String, ByVal StepGroupIDs As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SubmitDocumentToFlow1", New Object() {AuthenticationTicket, Path, FlowDefID, StepPlayerIDs, StepGroupIDs}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSubmitDocumentToFlow1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitDocumentToFlow1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String, ByVal StepPlayerIDs As String, ByVal StepGroupIDs As String)
            Me.SubmitDocumentToFlow1Async(AuthenticationTicket, Path, FlowDefID, StepPlayerIDs, StepGroupIDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitDocumentToFlow1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FlowDefID As String, ByVal StepPlayerIDs As String, ByVal StepGroupIDs As String, ByVal userState As Object)
            If (Me.SubmitDocumentToFlow1OperationCompleted Is Nothing) Then
                Me.SubmitDocumentToFlow1OperationCompleted = AddressOf Me.OnSubmitDocumentToFlow1OperationCompleted
            End If
            Me.InvokeAsync("SubmitDocumentToFlow1", New Object() {AuthenticationTicket, Path, FlowDefID, StepPlayerIDs, StepGroupIDs}, Me.SubmitDocumentToFlow1OperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitDocumentToFlow1OperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitDocumentToFlow1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitDocumentToFlow1Completed(Me, New SubmitDocumentToFlow1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDocumentCompletionStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetDocumentCompletionStatus(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PercentComplete As Integer, ByVal CompletionDate As Date) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetDocumentCompletionStatus", New Object() {AuthenticationTicket, Path, PercentComplete, CompletionDate})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetDocumentCompletionStatus(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PercentComplete As Integer, ByVal CompletionDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetDocumentCompletionStatus", New Object() {AuthenticationTicket, Path, PercentComplete, CompletionDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetDocumentCompletionStatus(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetDocumentCompletionStatusAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PercentComplete As Integer, ByVal CompletionDate As Date)
            Me.SetDocumentCompletionStatusAsync(AuthenticationTicket, Path, PercentComplete, CompletionDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetDocumentCompletionStatusAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PercentComplete As Integer, ByVal CompletionDate As Date, ByVal userState As Object)
            If (Me.SetDocumentCompletionStatusOperationCompleted Is Nothing) Then
                Me.SetDocumentCompletionStatusOperationCompleted = AddressOf Me.OnSetDocumentCompletionStatusOperationCompleted
            End If
            Me.InvokeAsync("SetDocumentCompletionStatus", New Object() {AuthenticationTicket, Path, PercentComplete, CompletionDate}, Me.SetDocumentCompletionStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetDocumentCompletionStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetDocumentCompletionStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetDocumentCompletionStatusCompleted(Me, New SetDocumentCompletionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDocumentImportance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetDocumentImportance(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Importance As Short) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetDocumentImportance", New Object() {AuthenticationTicket, Path, Importance})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetDocumentImportance(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Importance As Short, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetDocumentImportance", New Object() {AuthenticationTicket, Path, Importance}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetDocumentImportance(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetDocumentImportanceAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Importance As Short)
            Me.SetDocumentImportanceAsync(AuthenticationTicket, Path, Importance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetDocumentImportanceAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Importance As Short, ByVal userState As Object)
            If (Me.SetDocumentImportanceOperationCompleted Is Nothing) Then
                Me.SetDocumentImportanceOperationCompleted = AddressOf Me.OnSetDocumentImportanceOperationCompleted
            End If
            Me.InvokeAsync("SetDocumentImportance", New Object() {AuthenticationTicket, Path, Importance}, Me.SetDocumentImportanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetDocumentImportanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetDocumentImportanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetDocumentImportanceCompleted(Me, New SetDocumentImportanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderRandDSchedule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolderRandDSchedule(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolderRandDSchedule", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolderRandDSchedule(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolderRandDSchedule", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolderRandDSchedule(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolderRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetFolderRandDScheduleAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolderRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetFolderRandDScheduleOperationCompleted Is Nothing) Then
                Me.GetFolderRandDScheduleOperationCompleted = AddressOf Me.OnGetFolderRandDScheduleOperationCompleted
            End If
            Me.InvokeAsync("GetFolderRandDSchedule", New Object() {AuthenticationTicket, Path}, Me.GetFolderRandDScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolderRandDScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolderRandDScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolderRandDScheduleCompleted(Me, New GetFolderRandDScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentRandDSchedule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentRandDSchedule(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentRandDSchedule", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentRandDSchedule(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentRandDSchedule", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentRandDSchedule(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDocumentRandDScheduleAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDocumentRandDScheduleOperationCompleted Is Nothing) Then
                Me.GetDocumentRandDScheduleOperationCompleted = AddressOf Me.OnGetDocumentRandDScheduleOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentRandDSchedule", New Object() {AuthenticationTicket, Path}, Me.GetDocumentRandDScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentRandDScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentRandDScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentRandDScheduleCompleted(Me, New GetDocumentRandDScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDocumentRandDSchedule", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetDocumentRandDSchedule(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RDDefId As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetDocumentRandDSchedule", New Object() {AuthenticationTicket, Path, RDDefId})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetDocumentRandDSchedule(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RDDefId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetDocumentRandDSchedule", New Object() {AuthenticationTicket, Path, RDDefId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetDocumentRandDSchedule(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetDocumentRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RDDefId As Integer)
            Me.SetDocumentRandDScheduleAsync(AuthenticationTicket, Path, RDDefId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetDocumentRandDScheduleAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RDDefId As Integer, ByVal userState As Object)
            If (Me.SetDocumentRandDScheduleOperationCompleted Is Nothing) Then
                Me.SetDocumentRandDScheduleOperationCompleted = AddressOf Me.OnSetDocumentRandDScheduleOperationCompleted
            End If
            Me.InvokeAsync("SetDocumentRandDSchedule", New Object() {AuthenticationTicket, Path, RDDefId}, Me.SetDocumentRandDScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetDocumentRandDScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetDocumentRandDScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetDocumentRandDScheduleCompleted(Me, New SetDocumentRandDScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDocumentRetention", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetDocumentRetention(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RetentionStatus As Short, ByVal RetainUntil As Date) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetDocumentRetention", New Object() {AuthenticationTicket, Path, RetentionStatus, RetainUntil})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetDocumentRetention(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RetentionStatus As Short, ByVal RetainUntil As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetDocumentRetention", New Object() {AuthenticationTicket, Path, RetentionStatus, RetainUntil}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetDocumentRetention(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetDocumentRetentionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RetentionStatus As Short, ByVal RetainUntil As Date)
            Me.SetDocumentRetentionAsync(AuthenticationTicket, Path, RetentionStatus, RetainUntil, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetDocumentRetentionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal RetentionStatus As Short, ByVal RetainUntil As Date, ByVal userState As Object)
            If (Me.SetDocumentRetentionOperationCompleted Is Nothing) Then
                Me.SetDocumentRetentionOperationCompleted = AddressOf Me.OnSetDocumentRetentionOperationCompleted
            End If
            Me.InvokeAsync("SetDocumentRetention", New Object() {AuthenticationTicket, Path, RetentionStatus, RetainUntil}, Me.SetDocumentRetentionOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetDocumentRetentionOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetDocumentRetentionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetDocumentRetentionCompleted(Me, New SetDocumentRetentionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDocumentKeywords", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDocumentKeywords(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Keywords As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateDocumentKeywords", New Object() {AuthenticationTicket, Path, Keywords})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdateDocumentKeywords(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Keywords As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdateDocumentKeywords", New Object() {AuthenticationTicket, Path, Keywords}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdateDocumentKeywords(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentKeywordsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Keywords As String)
            Me.UpdateDocumentKeywordsAsync(AuthenticationTicket, Path, Keywords, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDocumentKeywordsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal Keywords As String, ByVal userState As Object)
            If (Me.UpdateDocumentKeywordsOperationCompleted Is Nothing) Then
                Me.UpdateDocumentKeywordsOperationCompleted = AddressOf Me.OnUpdateDocumentKeywordsOperationCompleted
            End If
            Me.InvokeAsync("UpdateDocumentKeywords", New Object() {AuthenticationTicket, Path, Keywords}, Me.UpdateDocumentKeywordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDocumentKeywordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDocumentKeywordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDocumentKeywordsCompleted(Me, New UpdateDocumentKeywordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccessList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessList(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAccessList", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAccessList(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAccessList", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAccessList(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessListAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetAccessListAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessListAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetAccessListOperationCompleted Is Nothing) Then
                Me.GetAccessListOperationCompleted = AddressOf Me.OnGetAccessListOperationCompleted
            End If
            Me.InvokeAsync("GetAccessList", New Object() {AuthenticationTicket, Path}, Me.GetAccessListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessListCompleted(Me, New GetAccessListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccessListHistory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessListHistory(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAccessListHistory", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAccessListHistory(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAccessListHistory", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAccessListHistory(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessListHistoryAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetAccessListHistoryAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessListHistoryAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetAccessListHistoryOperationCompleted Is Nothing) Then
                Me.GetAccessListHistoryOperationCompleted = AddressOf Me.OnGetAccessListHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetAccessListHistory", New Object() {AuthenticationTicket, Path}, Me.GetAccessListHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessListHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessListHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessListHistoryCompleted(Me, New GetAccessListHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAccessList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetAccessList(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AccessListXML As String, ByVal ApplyToTree As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("SetAccessList", New Object() {AuthenticationTicket, Path, AccessListXML, ApplyToTree})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginSetAccessList(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AccessListXML As String, ByVal ApplyToTree As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetAccessList", New Object() {AuthenticationTicket, Path, AccessListXML, ApplyToTree}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetAccessList(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetAccessListAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AccessListXML As String, ByVal ApplyToTree As Boolean)
            Me.SetAccessListAsync(AuthenticationTicket, Path, AccessListXML, ApplyToTree, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetAccessListAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AccessListXML As String, ByVal ApplyToTree As Boolean, ByVal userState As Object)
            If (Me.SetAccessListOperationCompleted Is Nothing) Then
                Me.SetAccessListOperationCompleted = AddressOf Me.OnSetAccessListOperationCompleted
            End If
            Me.InvokeAsync("SetAccessList", New Object() {AuthenticationTicket, Path, AccessListXML, ApplyToTree}, Me.SetAccessListOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetAccessListOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetAccessListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetAccessListCompleted(Me, New SetAccessListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApplyInheritedAccessList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApplyInheritedAccessList(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ApplyInheritedAccessList", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginApplyInheritedAccessList(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ApplyInheritedAccessList", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndApplyInheritedAccessList(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApplyInheritedAccessListAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.ApplyInheritedAccessListAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApplyInheritedAccessListAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.ApplyInheritedAccessListOperationCompleted Is Nothing) Then
                Me.ApplyInheritedAccessListOperationCompleted = AddressOf Me.OnApplyInheritedAccessListOperationCompleted
            End If
            Me.InvokeAsync("ApplyInheritedAccessList", New Object() {AuthenticationTicket, Path}, Me.ApplyInheritedAccessListOperationCompleted, userState)
        End Sub
        
        Private Sub OnApplyInheritedAccessListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApplyInheritedAccessListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApplyInheritedAccessListCompleted(Me, New ApplyInheritedAccessListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DocumentExists", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentExists(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DocumentExists", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDocumentExists(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DocumentExists", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDocumentExists(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentExistsAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.DocumentExistsAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentExistsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.DocumentExistsOperationCompleted Is Nothing) Then
                Me.DocumentExistsOperationCompleted = AddressOf Me.OnDocumentExistsOperationCompleted
            End If
            Me.InvokeAsync("DocumentExists", New Object() {AuthenticationTicket, Path}, Me.DocumentExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentExistsCompleted(Me, New DocumentExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DocumentExists1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DocumentExists1(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DocumentExists1", New Object() {AuthenticationTicket, FolderPath, DocumentName})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDocumentExists1(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DocumentExists1", New Object() {AuthenticationTicket, FolderPath, DocumentName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDocumentExists1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DocumentExists1Async(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String)
            Me.DocumentExists1Async(AuthenticationTicket, FolderPath, DocumentName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DocumentExists1Async(ByVal AuthenticationTicket As String, ByVal FolderPath As String, ByVal DocumentName As String, ByVal userState As Object)
            If (Me.DocumentExists1OperationCompleted Is Nothing) Then
                Me.DocumentExists1OperationCompleted = AddressOf Me.OnDocumentExists1OperationCompleted
            End If
            Me.InvokeAsync("DocumentExists1", New Object() {AuthenticationTicket, FolderPath, DocumentName}, Me.DocumentExists1OperationCompleted, userState)
        End Sub
        
        Private Sub OnDocumentExists1OperationCompleted(ByVal arg As Object)
            If (Not (Me.DocumentExists1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DocumentExists1Completed(Me, New DocumentExists1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocuments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocuments(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocuments", New Object() {AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocuments(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocuments", New Object() {AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocuments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetDocumentsAsync(AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetDocumentsOperationCompleted Is Nothing) Then
                Me.GetDocumentsOperationCompleted = AddressOf Me.OnGetDocumentsOperationCompleted
            End If
            Me.InvokeAsync("GetDocuments", New Object() {AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions}, Me.GetDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentsCompleted(Me, New GetDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubscriptions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubscriptions(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetSubscriptions", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSubscriptions(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSubscriptions", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSubscriptions(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubscriptionsAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetSubscriptionsAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubscriptionsAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetSubscriptionsOperationCompleted Is Nothing) Then
                Me.GetSubscriptionsOperationCompleted = AddressOf Me.OnGetSubscriptionsOperationCompleted
            End If
            Me.InvokeAsync("GetSubscriptions", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, Me.GetSubscriptionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubscriptionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubscriptionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubscriptionsCompleted(Me, New GetSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFavorites", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFavorites(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFavorites", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFavorites(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFavorites", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFavorites(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFavoritesAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetFavoritesAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFavoritesAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetFavoritesOperationCompleted Is Nothing) Then
                Me.GetFavoritesOperationCompleted = AddressOf Me.OnGetFavoritesOperationCompleted
            End If
            Me.InvokeAsync("GetFavorites", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, Me.GetFavoritesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFavoritesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFavoritesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFavoritesCompleted(Me, New GetFavoritesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyDocumentsAndFolders", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMyDocumentsAndFolders(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetMyDocumentsAndFolders", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMyDocumentsAndFolders(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMyDocumentsAndFolders", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMyDocumentsAndFolders(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMyDocumentsAndFoldersAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetMyDocumentsAndFoldersAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMyDocumentsAndFoldersAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetMyDocumentsAndFoldersOperationCompleted Is Nothing) Then
                Me.GetMyDocumentsAndFoldersOperationCompleted = AddressOf Me.OnGetMyDocumentsAndFoldersOperationCompleted
            End If
            Me.InvokeAsync("GetMyDocumentsAndFolders", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, Me.GetMyDocumentsAndFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMyDocumentsAndFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMyDocumentsAndFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMyDocumentsAndFoldersCompleted(Me, New GetMyDocumentsAndFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCheckedoutDocuments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCheckedoutDocuments(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetCheckedoutDocuments", New Object() {AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCheckedoutDocuments(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCheckedoutDocuments", New Object() {AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCheckedoutDocuments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCheckedoutDocumentsAsync(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetCheckedoutDocumentsAsync(AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCheckedoutDocumentsAsync(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetCheckedoutDocumentsOperationCompleted Is Nothing) Then
                Me.GetCheckedoutDocumentsOperationCompleted = AddressOf Me.OnGetCheckedoutDocumentsOperationCompleted
            End If
            Me.InvokeAsync("GetCheckedoutDocuments", New Object() {AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions}, Me.GetCheckedoutDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCheckedoutDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCheckedoutDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCheckedoutDocumentsCompleted(Me, New GetCheckedoutDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRecentDocuments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRecentDocuments(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRecentDocuments", New Object() {AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRecentDocuments(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRecentDocuments", New Object() {AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRecentDocuments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRecentDocumentsAsync(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetRecentDocumentsAsync(AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRecentDocumentsAsync(ByVal AuthenticationTicket As String, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetRecentDocumentsOperationCompleted Is Nothing) Then
                Me.GetRecentDocumentsOperationCompleted = AddressOf Me.OnGetRecentDocumentsOperationCompleted
            End If
            Me.InvokeAsync("GetRecentDocuments", New Object() {AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions}, Me.GetRecentDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRecentDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRecentDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRecentDocumentsCompleted(Me, New GetRecentDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownloadQue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownloadQue(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDownloadQue", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDownloadQue(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDownloadQue", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDownloadQue(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadQueAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetDownloadQueAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadQueAsync(ByVal AuthenticationTicket As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetDownloadQueOperationCompleted Is Nothing) Then
                Me.GetDownloadQueOperationCompleted = AddressOf Me.OnGetDownloadQueOperationCompleted
            End If
            Me.InvokeAsync("GetDownloadQue", New Object() {AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions}, Me.GetDownloadQueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadQueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadQueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadQueCompleted(Me, New GetDownloadQueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoldersAndDocuments", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFoldersAndDocuments(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFoldersAndDocuments", New Object() {AuthenticationTicket, Path, withrules, withpropertysets, withsecurity, withOwner, withVersions})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFoldersAndDocuments(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFoldersAndDocuments", New Object() {AuthenticationTicket, Path, withrules, withpropertysets, withsecurity, withOwner, withVersions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFoldersAndDocuments(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocumentsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean)
            Me.GetFoldersAndDocumentsAsync(AuthenticationTicket, Path, withrules, withpropertysets, withsecurity, withOwner, withVersions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocumentsAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal withrules As Boolean, ByVal withpropertysets As Boolean, ByVal withsecurity As Boolean, ByVal withOwner As Boolean, ByVal withVersions As Boolean, ByVal userState As Object)
            If (Me.GetFoldersAndDocumentsOperationCompleted Is Nothing) Then
                Me.GetFoldersAndDocumentsOperationCompleted = AddressOf Me.OnGetFoldersAndDocumentsOperationCompleted
            End If
            Me.InvokeAsync("GetFoldersAndDocuments", New Object() {AuthenticationTicket, Path, withrules, withpropertysets, withsecurity, withOwner, withVersions}, Me.GetFoldersAndDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFoldersAndDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFoldersAndDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFoldersAndDocumentsCompleted(Me, New GetFoldersAndDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolders", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolders(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolders", New Object() {AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolders(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolders", New Object() {AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolders(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean)
            Me.GetFoldersAsync(AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal WithRules As Boolean, ByVal withPropertySets As Boolean, ByVal withSecurity As Boolean, ByVal withOwner As Boolean, ByVal userState As Object)
            If (Me.GetFoldersOperationCompleted Is Nothing) Then
                Me.GetFoldersOperationCompleted = AddressOf Me.OnGetFoldersOperationCompleted
            End If
            Me.InvokeAsync("GetFolders", New Object() {AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner}, Me.GetFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFoldersCompleted(Me, New GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoldersAndDocuments1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFoldersAndDocuments1(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFoldersAndDocuments1", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFoldersAndDocuments1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFoldersAndDocuments1", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFoldersAndDocuments1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocuments1Async(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetFoldersAndDocuments1Async(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocuments1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetFoldersAndDocuments1OperationCompleted Is Nothing) Then
                Me.GetFoldersAndDocuments1OperationCompleted = AddressOf Me.OnGetFoldersAndDocuments1OperationCompleted
            End If
            Me.InvokeAsync("GetFoldersAndDocuments1", New Object() {AuthenticationTicket, Path}, Me.GetFoldersAndDocuments1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFoldersAndDocuments1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFoldersAndDocuments1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFoldersAndDocuments1Completed(Me, New GetFoldersAndDocuments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoldersAndDocuments2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFoldersAndDocuments2(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFoldersAndDocuments2", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFoldersAndDocuments2(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFoldersAndDocuments2", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFoldersAndDocuments2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocuments2Async(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetFoldersAndDocuments2Async(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocuments2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetFoldersAndDocuments2OperationCompleted Is Nothing) Then
                Me.GetFoldersAndDocuments2OperationCompleted = AddressOf Me.OnGetFoldersAndDocuments2OperationCompleted
            End If
            Me.InvokeAsync("GetFoldersAndDocuments2", New Object() {AuthenticationTicket, Path}, Me.GetFoldersAndDocuments2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFoldersAndDocuments2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFoldersAndDocuments2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFoldersAndDocuments2Completed(Me, New GetFoldersAndDocuments2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoldersAndDocumentsByPage2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFoldersAndDocumentsByPage2(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal filterXml As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFoldersAndDocumentsByPage2", New Object() {AuthenticationTicket, Path, filterXml, SortBy, AscendingOrder})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFoldersAndDocumentsByPage2(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal filterXml As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFoldersAndDocumentsByPage2", New Object() {AuthenticationTicket, Path, filterXml, SortBy, AscendingOrder}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFoldersAndDocumentsByPage2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocumentsByPage2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal filterXml As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean)
            Me.GetFoldersAndDocumentsByPage2Async(AuthenticationTicket, Path, filterXml, SortBy, AscendingOrder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocumentsByPage2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal filterXml As String, ByVal SortBy As String, ByVal AscendingOrder As Boolean, ByVal userState As Object)
            If (Me.GetFoldersAndDocumentsByPage2OperationCompleted Is Nothing) Then
                Me.GetFoldersAndDocumentsByPage2OperationCompleted = AddressOf Me.OnGetFoldersAndDocumentsByPage2OperationCompleted
            End If
            Me.InvokeAsync("GetFoldersAndDocumentsByPage2", New Object() {AuthenticationTicket, Path, filterXml, SortBy, AscendingOrder}, Me.GetFoldersAndDocumentsByPage2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFoldersAndDocumentsByPage2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFoldersAndDocumentsByPage2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFoldersAndDocumentsByPage2Completed(Me, New GetFoldersAndDocumentsByPage2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolders1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolders1(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolders1", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolders1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolders1", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolders1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolders1Async(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetFolders1Async(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolders1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetFolders1OperationCompleted Is Nothing) Then
                Me.GetFolders1OperationCompleted = AddressOf Me.OnGetFolders1OperationCompleted
            End If
            Me.InvokeAsync("GetFolders1", New Object() {AuthenticationTicket, Path}, Me.GetFolders1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolders1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolders1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolders1Completed(Me, New GetFolders1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolders2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFolders2(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFolders2", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFolders2(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFolders2", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFolders2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFolders2Async(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetFolders2Async(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFolders2Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetFolders2OperationCompleted Is Nothing) Then
                Me.GetFolders2OperationCompleted = AddressOf Me.OnGetFolders2OperationCompleted
            End If
            Me.InvokeAsync("GetFolders2", New Object() {AuthenticationTicket, Path}, Me.GetFolders2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFolders2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFolders2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFolders2Completed(Me, New GetFolders2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocuments1", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocuments1(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocuments1", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocuments1(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocuments1", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocuments1(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocuments1Async(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDocuments1Async(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocuments1Async(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDocuments1OperationCompleted Is Nothing) Then
                Me.GetDocuments1OperationCompleted = AddressOf Me.OnGetDocuments1OperationCompleted
            End If
            Me.InvokeAsync("GetDocuments1", New Object() {AuthenticationTicket, Path}, Me.GetDocuments1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocuments1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocuments1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocuments1Completed(Me, New GetDocuments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoldersByPage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFoldersByPage(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal PageNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFoldersByPage", New Object() {AuthenticationTicket, Path, FolderFilter, PageNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFoldersByPage(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal PageNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFoldersByPage", New Object() {AuthenticationTicket, Path, FolderFilter, PageNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFoldersByPage(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFoldersByPageAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal PageNumber As Integer)
            Me.GetFoldersByPageAsync(AuthenticationTicket, Path, FolderFilter, PageNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFoldersByPageAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal PageNumber As Integer, ByVal userState As Object)
            If (Me.GetFoldersByPageOperationCompleted Is Nothing) Then
                Me.GetFoldersByPageOperationCompleted = AddressOf Me.OnGetFoldersByPageOperationCompleted
            End If
            Me.InvokeAsync("GetFoldersByPage", New Object() {AuthenticationTicket, Path, FolderFilter, PageNumber}, Me.GetFoldersByPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFoldersByPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFoldersByPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFoldersByPageCompleted(Me, New GetFoldersByPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentsByPage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentsByPage(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDocumentsByPage", New Object() {AuthenticationTicket, Path, DocumentFilter, PageNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentsByPage(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentsByPage", New Object() {AuthenticationTicket, Path, DocumentFilter, PageNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentsByPage(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsByPageAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer)
            Me.GetDocumentsByPageAsync(AuthenticationTicket, Path, DocumentFilter, PageNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsByPageAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer, ByVal userState As Object)
            If (Me.GetDocumentsByPageOperationCompleted Is Nothing) Then
                Me.GetDocumentsByPageOperationCompleted = AddressOf Me.OnGetDocumentsByPageOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentsByPage", New Object() {AuthenticationTicket, Path, DocumentFilter, PageNumber}, Me.GetDocumentsByPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentsByPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentsByPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentsByPageCompleted(Me, New GetDocumentsByPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoldersAndDocumentsByPage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFoldersAndDocumentsByPage(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFoldersAndDocumentsByPage", New Object() {AuthenticationTicket, Path, FolderFilter, DocumentFilter, PageNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFoldersAndDocumentsByPage(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFoldersAndDocumentsByPage", New Object() {AuthenticationTicket, Path, FolderFilter, DocumentFilter, PageNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFoldersAndDocumentsByPage(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocumentsByPageAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer)
            Me.GetFoldersAndDocumentsByPageAsync(AuthenticationTicket, Path, FolderFilter, DocumentFilter, PageNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFoldersAndDocumentsByPageAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal FolderFilter As String, ByVal DocumentFilter As String, ByVal PageNumber As Integer, ByVal userState As Object)
            If (Me.GetFoldersAndDocumentsByPageOperationCompleted Is Nothing) Then
                Me.GetFoldersAndDocumentsByPageOperationCompleted = AddressOf Me.OnGetFoldersAndDocumentsByPageOperationCompleted
            End If
            Me.InvokeAsync("GetFoldersAndDocumentsByPage", New Object() {AuthenticationTicket, Path, FolderFilter, DocumentFilter, PageNumber}, Me.GetFoldersAndDocumentsByPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFoldersAndDocumentsByPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFoldersAndDocumentsByPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFoldersAndDocumentsByPageCompleted(Me, New GetFoldersAndDocumentsByPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Move", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Move(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Move", New Object() {AuthenticationTicket, SourcePath, DestinationPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginMove(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Move", New Object() {AuthenticationTicket, SourcePath, DestinationPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMove(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MoveAsync(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String)
            Me.MoveAsync(AuthenticationTicket, SourcePath, DestinationPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MoveAsync(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String, ByVal userState As Object)
            If (Me.MoveOperationCompleted Is Nothing) Then
                Me.MoveOperationCompleted = AddressOf Me.OnMoveOperationCompleted
            End If
            Me.InvokeAsync("Move", New Object() {AuthenticationTicket, SourcePath, DestinationPath}, Me.MoveOperationCompleted, userState)
        End Sub
        
        Private Sub OnMoveOperationCompleted(ByVal arg As Object)
            If (Not (Me.MoveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MoveCompleted(Me, New MoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Copy", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Copy(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Copy", New Object() {AuthenticationTicket, SourcePath, DestinationPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCopy(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Copy", New Object() {AuthenticationTicket, SourcePath, DestinationPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCopy(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CopyAsync(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String)
            Me.CopyAsync(AuthenticationTicket, SourcePath, DestinationPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CopyAsync(ByVal AuthenticationTicket As String, ByVal SourcePath As String, ByVal DestinationPath As String, ByVal userState As Object)
            If (Me.CopyOperationCompleted Is Nothing) Then
                Me.CopyOperationCompleted = AddressOf Me.OnCopyOperationCompleted
            End If
            Me.InvokeAsync("Copy", New Object() {AuthenticationTicket, SourcePath, DestinationPath}, Me.CopyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCopyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CopyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CopyCompleted(Me, New CopyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadZip", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadZip(ByVal AuthenticationTicket As String, ByVal Paths As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadZip", New Object() {AuthenticationTicket, Paths})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadZip(ByVal AuthenticationTicket As String, ByVal Paths As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadZip", New Object() {AuthenticationTicket, Paths}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadZip(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadZipAsync(ByVal AuthenticationTicket As String, ByVal Paths As String)
            Me.DownloadZipAsync(AuthenticationTicket, Paths, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadZipAsync(ByVal AuthenticationTicket As String, ByVal Paths As String, ByVal userState As Object)
            If (Me.DownloadZipOperationCompleted Is Nothing) Then
                Me.DownloadZipOperationCompleted = AddressOf Me.OnDownloadZipOperationCompleted
            End If
            Me.InvokeAsync("DownloadZip", New Object() {AuthenticationTicket, Paths}, Me.DownloadZipOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadZipOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadZipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadZipCompleted(Me, New DownloadZipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadDocument", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadDocument(ByVal AuthenticationTicket As String, ByVal Path As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadDocument", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadDocument(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadDocument", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadDocument(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.DownloadDocumentAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadDocumentAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.DownloadDocumentOperationCompleted Is Nothing) Then
                Me.DownloadDocumentOperationCompleted = AddressOf Me.OnDownloadDocumentOperationCompleted
            End If
            Me.InvokeAsync("DownloadDocument", New Object() {AuthenticationTicket, Path}, Me.DownloadDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadDocumentCompleted(Me, New DownloadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadDocumentVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadDocumentVersion(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadDocumentVersion", New Object() {AuthenticationTicket, Path, VersionNumber})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadDocumentVersion(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadDocumentVersion", New Object() {AuthenticationTicket, Path, VersionNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadDocumentVersion(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadDocumentVersionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer)
            Me.DownloadDocumentVersionAsync(AuthenticationTicket, Path, VersionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadDocumentVersionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal userState As Object)
            If (Me.DownloadDocumentVersionOperationCompleted Is Nothing) Then
                Me.DownloadDocumentVersionOperationCompleted = AddressOf Me.OnDownloadDocumentVersionOperationCompleted
            End If
            Me.InvokeAsync("DownloadDocumentVersion", New Object() {AuthenticationTicket, Path, VersionNumber}, Me.DownloadDocumentVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadDocumentVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadDocumentVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadDocumentVersionCompleted(Me, New DownloadDocumentVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownloadInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownloadInfo(ByVal AuthenticationTicket As String, ByVal Path As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDownloadInfo", New Object() {AuthenticationTicket, Path})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDownloadInfo(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDownloadInfo", New Object() {AuthenticationTicket, Path}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDownloadInfo(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadInfoAsync(ByVal AuthenticationTicket As String, ByVal Path As String)
            Me.GetDownloadInfoAsync(AuthenticationTicket, Path, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadInfoAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal userState As Object)
            If (Me.GetDownloadInfoOperationCompleted Is Nothing) Then
                Me.GetDownloadInfoOperationCompleted = AddressOf Me.OnGetDownloadInfoOperationCompleted
            End If
            Me.InvokeAsync("GetDownloadInfo", New Object() {AuthenticationTicket, Path}, Me.GetDownloadInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadInfoCompleted(Me, New GetDownloadInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownloadInfoByVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownloadInfoByVersion(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDownloadInfoByVersion", New Object() {AuthenticationTicket, Path, VersionNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDownloadInfoByVersion(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDownloadInfoByVersion", New Object() {AuthenticationTicket, Path, VersionNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDownloadInfoByVersion(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadInfoByVersionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer)
            Me.GetDownloadInfoByVersionAsync(AuthenticationTicket, Path, VersionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadInfoByVersionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal VersionNumber As Integer, ByVal userState As Object)
            If (Me.GetDownloadInfoByVersionOperationCompleted Is Nothing) Then
                Me.GetDownloadInfoByVersionOperationCompleted = AddressOf Me.OnGetDownloadInfoByVersionOperationCompleted
            End If
            Me.InvokeAsync("GetDownloadInfoByVersion", New Object() {AuthenticationTicket, Path, VersionNumber}, Me.GetDownloadInfoByVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadInfoByVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadInfoByVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadInfoByVersionCompleted(Me, New GetDownloadInfoByVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownloadHandler", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownloadHandler(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDownloadHandler", New Object() {AuthenticationTicket, Path, PreferedChunkSize})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDownloadHandler(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDownloadHandler", New Object() {AuthenticationTicket, Path, PreferedChunkSize}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDownloadHandler(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadHandlerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer)
            Me.GetDownloadHandlerAsync(AuthenticationTicket, Path, PreferedChunkSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadHandlerAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer, ByVal userState As Object)
            If (Me.GetDownloadHandlerOperationCompleted Is Nothing) Then
                Me.GetDownloadHandlerOperationCompleted = AddressOf Me.OnGetDownloadHandlerOperationCompleted
            End If
            Me.InvokeAsync("GetDownloadHandler", New Object() {AuthenticationTicket, Path, PreferedChunkSize}, Me.GetDownloadHandlerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadHandlerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadHandlerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadHandlerCompleted(Me, New GetDownloadHandlerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDownloadHandlerByVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDownloadHandlerByVersion(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer, ByVal VersionNumber As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDownloadHandlerByVersion", New Object() {AuthenticationTicket, Path, PreferedChunkSize, VersionNumber})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDownloadHandlerByVersion(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer, ByVal VersionNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDownloadHandlerByVersion", New Object() {AuthenticationTicket, Path, PreferedChunkSize, VersionNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDownloadHandlerByVersion(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDownloadHandlerByVersionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer, ByVal VersionNumber As Integer)
            Me.GetDownloadHandlerByVersionAsync(AuthenticationTicket, Path, PreferedChunkSize, VersionNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDownloadHandlerByVersionAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal PreferedChunkSize As Integer, ByVal VersionNumber As Integer, ByVal userState As Object)
            If (Me.GetDownloadHandlerByVersionOperationCompleted Is Nothing) Then
                Me.GetDownloadHandlerByVersionOperationCompleted = AddressOf Me.OnGetDownloadHandlerByVersionOperationCompleted
            End If
            Me.InvokeAsync("GetDownloadHandlerByVersion", New Object() {AuthenticationTicket, Path, PreferedChunkSize, VersionNumber}, Me.GetDownloadHandlerByVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDownloadHandlerByVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDownloadHandlerByVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDownloadHandlerByVersionCompleted(Me, New GetDownloadHandlerByVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFileChunk", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadFileChunk(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String, ByVal StartOffset As Integer, ByVal ChunkSize As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DownloadFileChunk", New Object() {AuthenticationTicket, DownloadHandler, StartOffset, ChunkSize})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDownloadFileChunk(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String, ByVal StartOffset As Integer, ByVal ChunkSize As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownloadFileChunk", New Object() {AuthenticationTicket, DownloadHandler, StartOffset, ChunkSize}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownloadFileChunk(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadFileChunkAsync(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String, ByVal StartOffset As Integer, ByVal ChunkSize As Integer)
            Me.DownloadFileChunkAsync(AuthenticationTicket, DownloadHandler, StartOffset, ChunkSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadFileChunkAsync(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String, ByVal StartOffset As Integer, ByVal ChunkSize As Integer, ByVal userState As Object)
            If (Me.DownloadFileChunkOperationCompleted Is Nothing) Then
                Me.DownloadFileChunkOperationCompleted = AddressOf Me.OnDownloadFileChunkOperationCompleted
            End If
            Me.InvokeAsync("DownloadFileChunk", New Object() {AuthenticationTicket, DownloadHandler, StartOffset, ChunkSize}, Me.DownloadFileChunkOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadFileChunkOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadFileChunkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadFileChunkCompleted(Me, New DownloadFileChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDocumentShortcut", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateDocumentShortcut(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TargetDocumentPath As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateDocumentShortcut", New Object() {AuthenticationTicket, Path, TargetDocumentPath})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateDocumentShortcut(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TargetDocumentPath As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateDocumentShortcut", New Object() {AuthenticationTicket, Path, TargetDocumentPath}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateDocumentShortcut(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentShortcutAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TargetDocumentPath As String)
            Me.CreateDocumentShortcutAsync(AuthenticationTicket, Path, TargetDocumentPath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateDocumentShortcutAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal TargetDocumentPath As String, ByVal userState As Object)
            If (Me.CreateDocumentShortcutOperationCompleted Is Nothing) Then
                Me.CreateDocumentShortcutOperationCompleted = AddressOf Me.OnCreateDocumentShortcutOperationCompleted
            End If
            Me.InvokeAsync("CreateDocumentShortcut", New Object() {AuthenticationTicket, Path, TargetDocumentPath}, Me.CreateDocumentShortcutOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateDocumentShortcutOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateDocumentShortcutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateDocumentShortcutCompleted(Me, New CreateDocumentShortcutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateURL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateURL(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AddressURL As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateURL", New Object() {AuthenticationTicket, Path, AddressURL})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateURL(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AddressURL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateURL", New Object() {AuthenticationTicket, Path, AddressURL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateURL(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateURLAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AddressURL As String)
            Me.CreateURLAsync(AuthenticationTicket, Path, AddressURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateURLAsync(ByVal AuthenticationTicket As String, ByVal Path As String, ByVal AddressURL As String, ByVal userState As Object)
            If (Me.CreateURLOperationCompleted Is Nothing) Then
                Me.CreateURLOperationCompleted = AddressOf Me.OnCreateURLOperationCompleted
            End If
            Me.InvokeAsync("CreateURL", New Object() {AuthenticationTicket, Path, AddressURL}, Me.CreateURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateURLCompleted(Me, New CreateURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUploadHandler", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateUploadHandler(ByVal AuthenticationTicket As String, ByVal PreferedChunkSize As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateUploadHandler", New Object() {AuthenticationTicket, PreferedChunkSize})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateUploadHandler(ByVal AuthenticationTicket As String, ByVal PreferedChunkSize As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateUploadHandler", New Object() {AuthenticationTicket, PreferedChunkSize}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateUploadHandler(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateUploadHandlerAsync(ByVal AuthenticationTicket As String, ByVal PreferedChunkSize As Integer)
            Me.CreateUploadHandlerAsync(AuthenticationTicket, PreferedChunkSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateUploadHandlerAsync(ByVal AuthenticationTicket As String, ByVal PreferedChunkSize As Integer, ByVal userState As Object)
            If (Me.CreateUploadHandlerOperationCompleted Is Nothing) Then
                Me.CreateUploadHandlerOperationCompleted = AddressOf Me.OnCreateUploadHandlerOperationCompleted
            End If
            Me.InvokeAsync("CreateUploadHandler", New Object() {AuthenticationTicket, PreferedChunkSize}, Me.CreateUploadHandlerOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateUploadHandlerOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateUploadHandlerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateUploadHandlerCompleted(Me, New CreateUploadHandlerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDownloadHandler", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteDownloadHandler(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteDownloadHandler", New Object() {AuthenticationTicket, DownloadHandler})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteDownloadHandler(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteDownloadHandler", New Object() {AuthenticationTicket, DownloadHandler}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteDownloadHandler(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteDownloadHandlerAsync(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String)
            Me.DeleteDownloadHandlerAsync(AuthenticationTicket, DownloadHandler, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteDownloadHandlerAsync(ByVal AuthenticationTicket As String, ByVal DownloadHandler As String, ByVal userState As Object)
            If (Me.DeleteDownloadHandlerOperationCompleted Is Nothing) Then
                Me.DeleteDownloadHandlerOperationCompleted = AddressOf Me.OnDeleteDownloadHandlerOperationCompleted
            End If
            Me.InvokeAsync("DeleteDownloadHandler", New Object() {AuthenticationTicket, DownloadHandler}, Me.DeleteDownloadHandlerOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteDownloadHandlerOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteDownloadHandlerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteDownloadHandlerCompleted(Me, New DeleteDownloadHandlerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUploadHandler", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUploadHandler(ByVal AuthenticationTicket As String, ByVal UploadHandler As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DeleteUploadHandler", New Object() {AuthenticationTicket, UploadHandler})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteUploadHandler(ByVal AuthenticationTicket As String, ByVal UploadHandler As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteUploadHandler", New Object() {AuthenticationTicket, UploadHandler}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteUploadHandler(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUploadHandlerAsync(ByVal AuthenticationTicket As String, ByVal UploadHandler As String)
            Me.DeleteUploadHandlerAsync(AuthenticationTicket, UploadHandler, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUploadHandlerAsync(ByVal AuthenticationTicket As String, ByVal UploadHandler As String, ByVal userState As Object)
            If (Me.DeleteUploadHandlerOperationCompleted Is Nothing) Then
                Me.DeleteUploadHandlerOperationCompleted = AddressOf Me.OnDeleteUploadHandlerOperationCompleted
            End If
            Me.InvokeAsync("DeleteUploadHandler", New Object() {AuthenticationTicket, UploadHandler}, Me.DeleteUploadHandlerOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUploadHandlerOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUploadHandlerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUploadHandlerCompleted(Me, New DeleteUploadHandlerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadFileChunkCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFileChunkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFileChunkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadTiffAsPDFCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTiffAsPDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTiffAsPDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadTiffAsPDFWithHandlerCompletedEventHandler(ByVal sender As Object, ByVal e As UploadTiffAsPDFWithHandlerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadTiffAsPDFWithHandlerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocumentWithHandlerCompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocumentWithHandlerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocumentWithHandlerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocumentWithHandler1CompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocumentWithHandler1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocumentWithHandler1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocumentWithHandler2CompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocumentWithHandler2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocumentWithHandler2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocumentWithHandler3CompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocumentWithHandler3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocumentWithHandler3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadNewDocumentWidthHandlerCompletedEventHandler(ByVal sender As Object, ByVal e As UploadNewDocumentWidthHandlerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadNewDocumentWidthHandlerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocument1CompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocument1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocument1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocument2CompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocument2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocument2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocument3CompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocument3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocument3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UploadDocument4CompletedEventHandler(ByVal sender As Object, ByVal e As UploadDocument4CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadDocument4CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RegisterEmailCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RegisterEmail1CompletedEventHandler(ByVal sender As Object, ByVal e As RegisterEmail1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterEmail1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RegisterEmail2CompletedEventHandler(ByVal sender As Object, ByVal e As RegisterEmail2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterEmail2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub ServerSideImportCompletedEventHandler(ByVal sender As Object, ByVal e As ServerSideImportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ServerSideImportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateDocumentUsingTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateDocumentUsingTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateDocumentUsingTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub IsLockPossibleCompletedEventHandler(ByVal sender As Object, ByVal e As IsLockPossibleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLockPossibleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub LockCompletedEventHandler(ByVal sender As Object, ByVal e As LockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UnLockCompletedEventHandler(ByVal sender As Object, ByVal e As UnLockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnLockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub EmptyRecycleBinCompletedEventHandler(ByVal sender As Object, ByVal e As EmptyRecycleBinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EmptyRecycleBinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub PurgeRecycleBinItemCompletedEventHandler(ByVal sender As Object, ByVal e As PurgeRecycleBinItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PurgeRecycleBinItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RestoreRecycleBinItemCompletedEventHandler(ByVal sender As Object, ByVal e As RestoreRecycleBinItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RestoreRecycleBinItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetRecycleBinContentCompletedEventHandler(ByVal sender As Object, ByVal e As GetRecycleBinContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRecycleBinContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDeleteLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeleteLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeleteLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolderCatalogCompletedEventHandler(ByVal sender As Object, ByVal e As GetFolderCatalogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolderCatalogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolderStatisticsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFolderStatisticsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolderStatisticsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub getApplicationParametersCompletedEventHandler(ByVal sender As Object, ByVal e As getApplicationParametersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getApplicationParametersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateDomainCompletedEventHandler(ByVal sender As Object, ByVal e As CreateDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteDomainCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDomainsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDomainsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDomainsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetMemberDomainsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMemberDomainsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMemberDomainsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDomainCompletedEventHandler(ByVal sender As Object, ByVal e As GetDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateDomainCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub ArchiveDomainCompletedEventHandler(ByVal sender As Object, ByVal e As ArchiveDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ArchiveDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UnarchiveDomainCompletedEventHandler(ByVal sender As Object, ByVal e As UnarchiveDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnarchiveDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DomainExistsCompletedEventHandler(ByVal sender As Object, ByVal e As DomainExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DomainExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateFlowDefCompletedEventHandler(ByVal sender As Object, ByVal e As CreateFlowDefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateFlowDefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateFlowDef1CompletedEventHandler(ByVal sender As Object, ByVal e As CreateFlowDef1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateFlowDef1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddFlowStepDefCompletedEventHandler(ByVal sender As Object, ByVal e As AddFlowStepDefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFlowStepDefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddFlowStepDef1CompletedEventHandler(ByVal sender As Object, ByVal e As AddFlowStepDef1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFlowStepDef1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddFlowTaskDefCompletedEventHandler(ByVal sender As Object, ByVal e As AddFlowTaskDefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddFlowTaskDefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDomainFlowsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDomainFlowsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDomainFlowsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolderFlowsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFolderFlowsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolderFlowsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFlowDefCompletedEventHandler(ByVal sender As Object, ByVal e As GetFlowDefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFlowDefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetPublishingRequirementsCompletedEventHandler(ByVal sender As Object, ByVal e As GetPublishingRequirementsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPublishingRequirementsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetAllUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetCoWorkersCompletedEventHandler(ByVal sender As Object, ByVal e As GetCoWorkersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCoWorkersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateUserCompletedEventHandler(ByVal sender As Object, ByVal e As CreateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateUserProfileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub ChangeUserStatusCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUserStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUserStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub ChangeUserPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUserPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUserPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateUserEmailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateUserPreferencesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserPreferencesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserPreferencesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteUserCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetUserGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetGlobalGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As GetGlobalGroupsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGlobalGroupsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDomainGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDomainGroupsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDomainGroupsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetLocalGroupsCompletedEventHandler(ByVal sender As Object, ByVal e As GetLocalGroupsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLocalGroupsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateUserGroupCompletedEventHandler(ByVal sender As Object, ByVal e As CreateUserGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateUserGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteUsergroupCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUsergroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUsergroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateUserGroupNameCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserGroupNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserGroupNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetUserGroupMembersCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserGroupMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserGroupMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddUsergroupMemberCompletedEventHandler(ByVal sender As Object, ByVal e As AddUsergroupMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUsergroupMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RemoveUsergroupMemberCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveUsergroupMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveUsergroupMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDomainMembersCompletedEventHandler(ByVal sender As Object, ByVal e As GetDomainMembersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDomainMembersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDomainUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetDomainUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDomainUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetLocalUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetLocalUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLocalUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetManagersCompletedEventHandler(ByVal sender As Object, ByVal e As GetManagersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManagersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddUserAsDomainMemberCompletedEventHandler(ByVal sender As Object, ByVal e As AddUserAsDomainMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUserAsDomainMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RemoveUserFromDomainMembershipCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveUserFromDomainMembershipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveUserFromDomainMembershipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddUserGroupAsDomainMemberCompletedEventHandler(ByVal sender As Object, ByVal e As AddUserGroupAsDomainMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUserGroupAsDomainMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RemoveUserGroupFromDomainMembershipCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveUserGroupFromDomainMembershipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveUserGroupFromDomainMembershipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddManagerToDomainCompletedEventHandler(ByVal sender As Object, ByVal e As AddManagerToDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddManagerToDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RemoveManagerFromDomainCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveManagerFromDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveManagerFromDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SearchCompletedEventHandler(ByVal sender As Object, ByVal e As SearchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetNextSearchPageCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextSearchPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextSearchPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetPreviousSearchPageCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreviousSearchPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreviousSearchPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetRandDScheduleInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetRandDScheduleInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRandDScheduleInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetRandDSchedulesCompletedEventHandler(ByVal sender As Object, ByVal e As GetRandDSchedulesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRandDSchedulesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateRandDScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As CreateRandDScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateRandDScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateRandDScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRandDScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRandDScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteRandDScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteRandDScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteRandDScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentTypesCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateDocumentTypeDefCompletedEventHandler(ByVal sender As Object, ByVal e As CreateDocumentTypeDefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateDocumentTypeDefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateDocumentTypeDefCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDocumentTypeDefCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDocumentTypeDefCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetTagDefintionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetTagDefintionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTagDefintionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetPropertySetDefinitionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertySetDefinitionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertySetDefinitionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetPropertySetDefinitions1CompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertySetDefinitions1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertySetDefinitions1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetPropertySetFieldOptionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertySetFieldOptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertySetFieldOptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetPropertySetDefinitionCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertySetDefinitionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertySetDefinitionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreatePropertySetDefinitionCompletedEventHandler(ByVal sender As Object, ByVal e As CreatePropertySetDefinitionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreatePropertySetDefinitionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdatePropertySetDefinitionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePropertySetDefinitionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePropertySetDefinitionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeletePropertySetDefinitionCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePropertySetDefinitionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePropertySetDefinitionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddPropertySetFieldCompletedEventHandler(ByVal sender As Object, ByVal e As AddPropertySetFieldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPropertySetFieldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetPropertySetLookupFieldParametersForMYSQLCompletedEventHandler(ByVal sender As Object, ByVal e As SetPropertySetLookupFieldParametersForMYSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPropertySetLookupFieldParametersForMYSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetPropertySetLookupFieldParametersForSQLServerCompletedEventHandler(ByVal sender As Object, ByVal e As SetPropertySetLookupFieldParametersForSQLServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPropertySetLookupFieldParametersForSQLServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetPropertySetLookupFieldParametersForORACLECompletedEventHandler(ByVal sender As Object, ByVal e As SetPropertySetLookupFieldParametersForORACLECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPropertySetLookupFieldParametersForORACLECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddPropertySetFieldOptionCompletedEventHandler(ByVal sender As Object, ByVal e As AddPropertySetFieldOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPropertySetFieldOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeletePropertySetFieldOptionCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePropertySetFieldOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePropertySetFieldOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeletePropertySetFieldCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePropertySetFieldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePropertySetFieldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub MaintenanceBeatCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub ServerInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ServerInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ServerInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetAddInInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAddInInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAddInInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetAddInPartCompletedEventHandler(ByVal sender As Object, ByVal e As GetAddInPartCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAddInPartCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub LogOutCompletedEventHandler(ByVal sender As Object, ByVal e As LogOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateTicketforUserCompletedEventHandler(ByVal sender As Object, ByVal e As CreateTicketforUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateTicketforUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AuthenticateUserCompletedEventHandler(ByVal sender As Object, ByVal e As AuthenticateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthenticateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AuthenticateUser1CompletedEventHandler(ByVal sender As Object, ByVal e As AuthenticateUser1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthenticateUser1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RenewTicketCompletedEventHandler(ByVal sender As Object, ByVal e As RenewTicketCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RenewTicketCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub isValidTicketCompletedEventHandler(ByVal sender As Object, ByVal e As isValidTicketCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isValidTicketCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UserExistsCompletedEventHandler(ByVal sender As Object, ByVal e As UserExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DocumentAccessAllowedCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentAccessAllowedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentAccessAllowedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub FolderAccessAllowedCompletedEventHandler(ByVal sender As Object, ByVal e As FolderAccessAllowedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FolderAccessAllowedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateFolderCompletedEventHandler(ByVal sender As Object, ByVal e As CreateFolderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateFolderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateFolder1CompletedEventHandler(ByVal sender As Object, ByVal e As CreateFolder1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateFolder1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteFolderCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFolderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFolderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UnpublishDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UnpublishDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnpublishDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub PublishDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As PublishDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PublishDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteDocumentVersionCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDocumentVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDocumentVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddUserToFolderSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As AddUserToFolderSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUserToFolderSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddUserToDocumentSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As AddUserToDocumentSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUserToDocumentSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RemoveUserFromFolderSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveUserFromFolderSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveUserFromFolderSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RemoveUserFromDocumentSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveUserFromDocumentSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveUserFromDocumentSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub FolderExistsCompletedEventHandler(ByVal sender As Object, ByVal e As FolderExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FolderExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub FolderExists1CompletedEventHandler(ByVal sender As Object, ByVal e As FolderExists1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FolderExists1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetSubFoldersCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubFoldersCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubFoldersCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetParentFolderIDsCompletedEventHandler(ByVal sender As Object, ByVal e As GetParentFolderIDsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetParentFolderIDsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolderCompletedEventHandler(ByVal sender As Object, ByVal e As GetFolderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentVersionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentVersionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentVersionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentAbstractCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentAbstractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentAbstractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentTextOnlyContentCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentTextOnlyContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentTextOnlyContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetVersionTextOnlyContentCompletedEventHandler(ByVal sender As Object, ByVal e As GetVersionTextOnlyContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVersionTextOnlyContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetDocumentTextOnlyContentCompletedEventHandler(ByVal sender As Object, ByVal e As SetDocumentTextOnlyContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetDocumentTextOnlyContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetVersionTextOnlyContentCompletedEventHandler(ByVal sender As Object, ByVal e As SetVersionTextOnlyContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetVersionTextOnlyContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentCommentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentCommentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentCommentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AssociationTypesCompletedEventHandler(ByVal sender As Object, ByVal e As AssociationTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssociationTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AssociateDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As AssociateDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssociateDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AssociateFolderCompletedEventHandler(ByVal sender As Object, ByVal e As AssociateFolderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssociateFolderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub RemoveAssociationCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveAssociationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveAssociationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AssociatedDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As AssociatedDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssociatedDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AssociatedFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As AssociatedFoldersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssociatedFoldersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AssociatedFoldersAndDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As AssociatedFoldersAndDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssociatedFoldersAndDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub getTasksCompletedEventHandler(ByVal sender As Object, ByVal e As getTasksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTasksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDueTaskDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDueTaskDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDueTaskDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddDocumentCommentCompletedEventHandler(ByVal sender As Object, ByVal e As AddDocumentCommentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddDocumentCommentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteDocumentCommentCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDocumentCommentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDocumentCommentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentViewLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentViewLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentViewLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentReadLogHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentReadLogHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentReadLogHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentKeywordsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentKeywordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentKeywordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetPropertySetsCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertySetsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertySetsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub AddPropertySetRowCompletedEventHandler(ByVal sender As Object, ByVal e As AddPropertySetRowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPropertySetRowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdatePropertySetRowCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePropertySetRowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePropertySetRowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeletePropertySetRowCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePropertySetRowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePropertySetRowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As GetOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As SetOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolderRulesCompletedEventHandler(ByVal sender As Object, ByVal e As GetFolderRulesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolderRulesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetFolderRulesCompletedEventHandler(ByVal sender As Object, ByVal e As SetFolderRulesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetFolderRulesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateFolderPropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFolderPropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFolderPropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateDocumentPropertiesCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDocumentPropertiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDocumentPropertiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateDocumentProperties1CompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDocumentProperties1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDocumentProperties1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateDocumentTypeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDocumentTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDocumentTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SubmitDocumentToFlowCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitDocumentToFlowCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitDocumentToFlowCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SubmitDocumentToFlow1CompletedEventHandler(ByVal sender As Object, ByVal e As SubmitDocumentToFlow1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitDocumentToFlow1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetDocumentCompletionStatusCompletedEventHandler(ByVal sender As Object, ByVal e As SetDocumentCompletionStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetDocumentCompletionStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetDocumentImportanceCompletedEventHandler(ByVal sender As Object, ByVal e As SetDocumentImportanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetDocumentImportanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolderRandDScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As GetFolderRandDScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolderRandDScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentRandDScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentRandDScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentRandDScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetDocumentRandDScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As SetDocumentRandDScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetDocumentRandDScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetDocumentRetentionCompletedEventHandler(ByVal sender As Object, ByVal e As SetDocumentRetentionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetDocumentRetentionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub UpdateDocumentKeywordsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDocumentKeywordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDocumentKeywordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetAccessListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetAccessListHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessListHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessListHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SetAccessListCompletedEventHandler(ByVal sender As Object, ByVal e As SetAccessListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetAccessListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub ApplyInheritedAccessListCompletedEventHandler(ByVal sender As Object, ByVal e As ApplyInheritedAccessListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ApplyInheritedAccessListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DocumentExistsCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DocumentExists1CompletedEventHandler(ByVal sender As Object, ByVal e As DocumentExists1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentExists1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetSubscriptionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubscriptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubscriptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFavoritesCompletedEventHandler(ByVal sender As Object, ByVal e As GetFavoritesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFavoritesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetMyDocumentsAndFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As GetMyDocumentsAndFoldersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMyDocumentsAndFoldersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetCheckedoutDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCheckedoutDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCheckedoutDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetRecentDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetRecentDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRecentDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDownloadQueCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadQueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadQueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFoldersAndDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFoldersAndDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFoldersAndDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As GetFoldersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFoldersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFoldersAndDocuments1CompletedEventHandler(ByVal sender As Object, ByVal e As GetFoldersAndDocuments1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFoldersAndDocuments1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFoldersAndDocuments2CompletedEventHandler(ByVal sender As Object, ByVal e As GetFoldersAndDocuments2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFoldersAndDocuments2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFoldersAndDocumentsByPage2CompletedEventHandler(ByVal sender As Object, ByVal e As GetFoldersAndDocumentsByPage2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFoldersAndDocumentsByPage2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolders1CompletedEventHandler(ByVal sender As Object, ByVal e As GetFolders1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolders1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFolders2CompletedEventHandler(ByVal sender As Object, ByVal e As GetFolders2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFolders2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocuments1CompletedEventHandler(ByVal sender As Object, ByVal e As GetDocuments1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocuments1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFoldersByPageCompletedEventHandler(ByVal sender As Object, ByVal e As GetFoldersByPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFoldersByPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDocumentsByPageCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentsByPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentsByPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetFoldersAndDocumentsByPageCompletedEventHandler(ByVal sender As Object, ByVal e As GetFoldersAndDocumentsByPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFoldersAndDocumentsByPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub MoveCompletedEventHandler(ByVal sender As Object, ByVal e As MoveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MoveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CopyCompletedEventHandler(ByVal sender As Object, ByVal e As CopyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CopyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DownloadZipCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadZipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadZipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DownloadDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DownloadDocumentVersionCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadDocumentVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadDocumentVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDownloadInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDownloadInfoByVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadInfoByVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadInfoByVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDownloadHandlerCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadHandlerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadHandlerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetDownloadHandlerByVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetDownloadHandlerByVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDownloadHandlerByVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DownloadFileChunkCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadFileChunkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadFileChunkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateDocumentShortcutCompletedEventHandler(ByVal sender As Object, ByVal e As CreateDocumentShortcutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateDocumentShortcutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateURLCompletedEventHandler(ByVal sender As Object, ByVal e As CreateURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub CreateUploadHandlerCompletedEventHandler(ByVal sender As Object, ByVal e As CreateUploadHandlerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateUploadHandlerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteDownloadHandlerCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteDownloadHandlerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteDownloadHandlerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub DeleteUploadHandlerCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUploadHandlerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUploadHandlerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
